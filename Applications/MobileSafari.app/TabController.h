/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 11:25:12 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /Applications/MobileSafari.app/MobileSafari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MobileSafari/MobileSafari-Structs.h>
#import <MobileSafari/RecentlyClosedTabViewControllerDelegate.h>
#import <MobileSafari/TabBarDelegate.h>
#import <MobileSafari/TabOverviewDelegate.h>
#import <MobileSafari/TabSnapshotCacheDelegate.h>
#import <MobileSafari/TiltedTabViewDelegate.h>

@class BrowserController, NSMutableArray, NSTimer, TabDocument, NSMutableSet, GestureRecognizingBarButtonItem, RecentlyClosedTabViewController, TabSnapshotCache, NSMapTable, TabBar, _SFBrowserSavedState, TiltedTabView, UIButton, TabOverview, NSArray, CloudTabStore, NSString;

@interface TabController : NSObject <RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate> {

	BrowserController* _browserController;
	NSMutableArray* _normalTabDocuments;
	NSMutableArray* _privateTabDocuments;
	NSTimer* _saveStateTimer;
	NSTimer* _stateValidateTimer;
	TabDocument* _tabDocumentBeingHiddenFromTabView;
	NSMutableSet* _tabDocumentsAboutToBeClosedInTiltedTabView;
	GestureRecognizingBarButtonItem* _tiltedTabViewAddTabButton;
	char _tiltedTabViewIsShowing;
	char _tabOverviewIsShowing;
	NSTimer* _updateContinuityTimer;
	char _tabBarItemsFixed;
	char _tabViewItemsFixed;
	RecentlyClosedTabViewController* _recentlyClosedTabController;
	TabSnapshotCache* _snapshotCache;
	char _flushPendingSnapshots;
	/*^block*/id _flushPendingSnapshotsCompletion;
	char _didRestoreCloudTabsForEducationDevice;
	char _didReceiveFirstCloudTabDeviceUpdateNotification;
	TabDocument* _tabDocumentBeingDragged;
	TabDocument* _placeholderTabDocumentBeingDragged;
	NSMapTable* _tabOverviewItemToTabDocumentMap;
	NSMapTable* _tiltedTabItemToTabDocumentMap;
	char _tabExposeButtonIndicatorExcludesBlankDocuments;
	char _privateBrowsingEnabled;
	char _snapshotsAreEnabled;
	char _tabsAreOnLease;
	char _shouldTogglePrivateBrowsingOnSplit;
	char _shouldDeferSnapshotRequest;
	TabBar* _tabBar;
	TabDocument* _privateActiveTabDocument;
	TabDocument* _normalActiveTabDocument;
	_SFBrowserSavedState* _savedState;
	TiltedTabView* _tiltedTabView;
	UIButton* _tiltedTabViewPrivateBrowsingButton;
	TabOverview* _tabOverview;
	int _tabDisplayMode;

}

@property (assign,nonatomic) char shouldDeferSnapshotRequest;                                              //@synthesize shouldDeferSnapshotRequest=_shouldDeferSnapshotRequest - In the implementation block
@property (nonatomic,copy,readonly) NSArray * tabDocuments;                                                //@synthesize normalTabDocuments=_normalTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * privateTabDocuments;                                         //@synthesize privateTabDocuments=_privateTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * currentTabDocuments; 
@property (nonatomic,copy,readonly) NSArray * allTabDocuments; 
@property (nonatomic,retain) TabDocument * activeTabDocument; 
@property (nonatomic,retain) TabDocument * privateActiveTabDocument;                                       //@synthesize privateActiveTabDocument=_privateActiveTabDocument - In the implementation block
@property (nonatomic,retain) TabDocument * normalActiveTabDocument;                                        //@synthesize normalActiveTabDocument=_normalActiveTabDocument - In the implementation block
@property (nonatomic,readonly) TabDocument * tabDocumentBeingActivated; 
@property (assign,nonatomic) char tabViewDefersActivation; 
@property (nonatomic,readonly) char canCloseTab; 
@property (nonatomic,retain) _SFBrowserSavedState * savedState;                                            //@synthesize savedState=_savedState - In the implementation block
@property (assign,getter=isPrivateBrowsingEnabled,nonatomic) char privateBrowsingEnabled;                  //@synthesize privateBrowsingEnabled=_privateBrowsingEnabled - In the implementation block
@property (nonatomic,readonly) CloudTabStore * cloudTabStore; 
@property (nonatomic,retain,readonly) TabBar * tabBar;                                                     //@synthesize tabBar=_tabBar - In the implementation block
@property (assign,nonatomic) char usesTabBar; 
@property (nonatomic,readonly) RecentlyClosedTabViewController * recentlyClosedTabController; 
@property (assign,nonatomic) char tabExposeButtonIndicatorExcludesBlankDocuments;                          //@synthesize tabExposeButtonIndicatorExcludesBlankDocuments=_tabExposeButtonIndicatorExcludesBlankDocuments - In the implementation block
@property (nonatomic,retain,readonly) TiltedTabView * tiltedTabView;                                       //@synthesize tiltedTabView=_tiltedTabView - In the implementation block
@property (assign,nonatomic) char usesTiltedTabView; 
@property (nonatomic,readonly) NSArray * tiltedTabViewToolbarItems; 
@property (nonatomic,readonly) UIButton * tiltedTabViewPrivateBrowsingButton;                              //@synthesize tiltedTabViewPrivateBrowsingButton=_tiltedTabViewPrivateBrowsingButton - In the implementation block
@property (nonatomic,retain,readonly) TabOverview * tabOverview;                                           //@synthesize tabOverview=_tabOverview - In the implementation block
@property (assign,nonatomic) char usesTabOverview; 
@property (nonatomic,readonly) char tabOverviewIsShowing;                                                  //@synthesize tabOverviewIsShowing=_tabOverviewIsShowing - In the implementation block
@property (nonatomic,readonly) char tabDocumentBeingHiddenFromTabViewExists; 
@property (assign,nonatomic) char snapshotsAreEnabled;                                                     //@synthesize snapshotsAreEnabled=_snapshotsAreEnabled - In the implementation block
@property (assign,nonatomic) int tabDisplayMode;                                                           //@synthesize tabDisplayMode=_tabDisplayMode - In the implementation block
@property (assign,nonatomic) char tabsAreOnLease;                                                          //@synthesize tabsAreOnLease=_tabsAreOnLease - In the implementation block
@property (assign,nonatomic) char shouldTogglePrivateBrowsingOnSplit;                                      //@synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(char)canAddNewTab;
-(void)tiltedTabViewWillPresent:(id)arg1 ;
-(void)tiltedTabViewDidPresent:(id)arg1 ;
-(void)tiltedTabViewWillDismiss:(id)arg1 ;
-(void)tiltedTabViewDidDismiss:(id)arg1 ;
-(NSArray *)allTabDocuments;
-(NSArray *)privateTabDocuments;
-(NSArray *)tabDocuments;
-(void)updateTabCount;
-(void)restoreEducationDeviceTabs;
-(TabDocument *)activeTabDocument;
-(id)initWithBrowserController:(id)arg1 ;
-(void)insertNewTabDocument:(id)arg1 openedFromTabDocument:(id)arg2 inBackground:(char)arg3 animated:(char)arg4 ;
-(TabOverview *)tabOverview;
-(void)setSavedState:(_SFBrowserSavedState *)arg1 ;
-(void)closeAllOpenTabsAnimated:(char)arg1 exitTabView:(char)arg2 ;
-(TiltedTabView *)tiltedTabView;
-(void)setActiveTabDocument:(TabDocument *)arg1 ;
-(void)_addNewActiveTiltedTabViewTab;
-(void)tiltedTabView:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeItem:(id)arg2 ;
-(void)closeTabDocument:(id)arg1 animated:(char)arg2 ;
-(char)readState;
-(void)clearBrowserController;
-(void)setTabExposeButtonIndicatorExcludesBlankDocuments:(char)arg1 ;
-(void)setSnapshotsAreEnabled:(char)arg1 ;
-(void)flushPendingSnapshotsWithCompletion:(/*^block*/id)arg1 ;
-(char)usesTabBar;
-(char)usesTabOverview;
-(NSArray *)currentTabDocuments;
-(void)setUsesTiltedTabView:(char)arg1 ;
-(void)setUsesTabOverview:(char)arg1 ;
-(void)updateTiltedTabViewToolbarItems;
-(NSArray *)tiltedTabViewToolbarItems;
-(void)dismissTabViewAnimated:(char)arg1 ;
-(void)setUsesTabBar:(char)arg1 ;
-(void)updateTabBarAnimated:(char)arg1 ;
-(void)openInitialBlankTabDocumentIfNeeded;
-(void)updateTabExposeButtonIndicator;
-(void)updateTabStatesAndValidate:(char)arg1 shouldDeleteEmptyWindow:(char)arg2 ;
-(RecentlyClosedTabViewController *)recentlyClosedTabController;
-(void)setTabViewDefersActivation:(char)arg1 ;
-(void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2 ;
-(TabDocument *)tabDocumentBeingActivated;
-(void)saveTabDocumentUserActivitySoon:(id)arg1 ;
-(char)canCloseTab;
-(char)tabViewDefersActivation;
-(void)newTab;
-(void)closeTab;
-(void)setActiveTabDocument:(id)arg1 animated:(char)arg2 deferActivation:(char)arg3 ;
-(void)removeSavedStateForTabDocument:(id)arg1 ;
-(void)saveStateForTabDocument:(id)arg1 needsValidate:(char)arg2 ;
-(void)saveBrowserWindowStateOnly;
-(_SFBrowserSavedState *)savedState;
-(void)setActiveTabDocument:(id)arg1 animated:(char)arg2 ;
-(void)openBlankTabDocumentInTabBar;
-(void)insertNewBlankTabDocumentAnimated:(char)arg1 ;
-(char)tabsAreOnLease;
-(char)tabDocumentBeingHiddenFromTabViewExists;
-(id)tabDocumentForURL:(id)arg1 ;
-(void)_addTabLongPressRecognized:(id)arg1 ;
-(void)requestSnapshotForTabDocument:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelDragInteraction;
-(char)tabOverviewIsShowing;
-(id)insertDragInteractionPlaceholderTabDocumentForTabDocument:(id)arg1 atIndex:(unsigned)arg2 ;
-(void)closeDragInteractionPlaceholderTabDocument;
-(void)recentlyClosedTabViewController:(id)arg1 didSelectTabStateWithData:(id)arg2 ;
-(char)needsCloudTabPeriodicUpdates;
-(void)updateEducationTabsLastSyncDate;
-(void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2 ;
-(void)detachTabDocument:(id)arg1 animated:(char)arg2 ;
-(void)acceptDropWithTabDocument:(id)arg1 ;
-(void)mergeAllTabDocumentsFromTabController:(id)arg1 ;
-(void)setTabDisplayMode:(int)arg1 ;
-(void)saveAllTabsStateWithQuickUpdate:(char)arg1 ;
-(void)saveStateInBackground:(char)arg1 ;
-(void)returnTabDocumentsToTabController:(id)arg1 ;
-(int)tabDisplayMode;
-(void)setShouldTogglePrivateBrowsingOnSplit:(char)arg1 ;
-(CloudTabStore *)cloudTabStore;
-(id)_blankSnapshot;
-(id)blankSnapshotForTiltedTabView:(id)arg1 ;
-(char)tiltedTabView:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tiltedTabView:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(char)tiltedTabView:(id)arg1 itemHasValidSnapshot:(id)arg2 ;
-(id)currentItemForTiltedTabView:(id)arg1 ;
-(id)tiltedTabView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id*)arg3 ofHeight:(float)arg4 ;
-(id)expectedSuperviewForTiltedTabView:(id)arg1 ;
-(id)snapshotForTiltedTabView:(id)arg1 item:(id)arg2 ;
-(float)tiltedTabView:(id)arg1 headerHeightForItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(char)arg3 ;
-(void)tiltedTabViewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(void)tiltedTabView:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(void)tabBar:(id)arg1 closeItem:(id)arg2 ;
-(char)tabBar:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tabBar:(id)arg1 activateItem:(id)arg2 ;
-(char)tabBar:(id)arg1 canMoveItem:(id)arg2 ;
-(char)tabBar:(id)arg1 canBeginDragInteractionForTabBarItem:(id)arg2 ;
-(void)tabBar:(id)arg1 didUpdateDragInteractionPoint:(CGPoint)arg2 ;
-(void)tabBar:(id)arg1 didBeginDragInteractionForTabBarItem:(id)arg2 atPoint:(CGPoint)arg3 dragType:(int)arg4 ;
-(void)tabBar:(id)arg1 moveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tabBar:(id)arg1 didEndDragInteractionAtPoint:(CGPoint)arg2 ;
-(void)_updateAddTabButtonEnabled;
-(void)_updateMergedItemsAndHibernatedTabsState;
-(void)updateHibernatedTabDocumentsSavingState;
-(void)logTabActivationInterval:(double)arg1 forActivationType:(int)arg2 ;
-(char)usesTiltedTabView;
-(id)_tabDocumentRepresentedByTiltedTabItem:(id)arg1 ;
-(id)_tabDocumentRepresentedByTabOverviewItem:(id)arg1 ;
-(char)tabOverview:(id)arg1 canCloseItem:(id)arg2 ;
-(void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2 ;
-(id)_currentTabs;
-(id)_oldestInactiveTabDocument;
-(void)_closeTabDocument:(id)arg1 animated:(char)arg2 allowAddingToRecentlyClosedTabs:(char)arg3 ;
-(void)_insertTabDocument:(id)arg1 atIndex:(unsigned)arg2 inBackground:(char)arg3 animated:(char)arg4 updateUI:(char)arg5 ;
-(id)_otherTabDocuments;
-(char)_makeRoomForNewTabDocument:(id)arg1 ;
-(void)_updateTiltedTabViewItems;
-(void)_updateTabOverviewItems;
-(void)_updateTabBarAnimated:(char)arg1 keepingDocumentVisible:(id)arg2 ;
-(void)_insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(char)arg3 animated:(char)arg4 ;
-(void)setShouldDeferSnapshotRequest:(char)arg1 ;
-(id)_insertNewBlankTabDocumentInBackground:(char)arg1 animated:(char)arg2 ;
-(void)_adoptTabDocument:(id)arg1 atIndex:(unsigned)arg2 forPrivateBrowsing:(char)arg3 ;
-(void)_addNewActiveTabOverviewTab;
-(id)_openBlankTabDocument;
-(id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2 ;
-(void)_closeTabDocument:(id)arg1 animated:(char)arg2 temporarily:(char)arg3 allowAddingToRecentlyClosedTabs:(char)arg4 keepWebViewAlive:(char)arg5 ;
-(void)_setTabBarItemsFixed:(char)arg1 ;
-(char)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1 ;
-(void)_logActivationForTab:(id)arg1 ;
-(void)_updateTiltedTabViewItemsAnimated:(char)arg1 ;
-(void)closeAllOpenTabsAnimated:(char)arg1 exitTabView:(char)arg2 temporarily:(char)arg3 ;
-(void)_closeTabDocument:(id)arg1 animated:(char)arg2 temporarily:(char)arg3 ;
-(void)_cloudTabsDidUpdate:(id)arg1 ;
-(void)_suppressSingleEmptyTabIfAppropriate;
-(void)_updateExplanationViewVisibilityAnimated:(char)arg1 ;
-(void)_updateTiltedTabViewItemsWithTransition:(int)arg1 ;
-(void)_restoreEducationTabsIfNecessaryAnimated:(char)arg1 ;
-(void)_updateSnapshotCacheState;
-(id)_tabDocumentRepresentedByTabBarItem:(id)arg1 ;
-(void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2 ;
-(TabDocument *)privateActiveTabDocument;
-(TabDocument *)normalActiveTabDocument;
-(char)_tabsAreAllEmpty:(id)arg1 ;
-(void)_detachTabDocuments:(id)arg1 nextActiveDocument:(id)arg2 ;
-(void)_adoptTabDocuments:(id)arg1 indicesFromMergingController:(id)arg2 ;
-(void)_adoptActiveTabDocument:(id)arg1 forPrivateBrowsing:(char)arg2 ;
-(id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(char)arg1 ;
-(void)setPrivateActiveTabDocument:(TabDocument *)arg1 ;
-(void)setNormalActiveTabDocument:(TabDocument *)arg1 ;
-(void)setTabsAreOnLease:(char)arg1 ;
-(void)_mergeTabDocumentsFromTabController:(id)arg1 forPrivateBrowsingTabs:(char)arg2 ;
-(void)_returnTabDocumentsToTabController:(id)arg1 forPrivateBrowsingTabs:(char)arg2 ;
-(void)togglePrivateBrowsingOnSplitIfNeeded;
-(char)shouldTogglePrivateBrowsingOnSplit;
-(char)_createAndSwitchToNewBlankTabDocumentOpeningCaptiveLandingPageIfNecessary;
-(char)_shouldShowExplanationView;
-(void)_updateSnapshotIdentifiers;
-(void)_updateTabViewCloudTabs;
-(void)dismissTabView;
-(void)_doneLongPressRecognized:(id)arg1 ;
-(void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;
-(void)_updateCloudTabStorePeriodicUpdates;
-(void)_updateTabSnapshotsAnimated:(char)arg1 ;
-(void)_updateSnapshotCacheStateForPresented:(char)arg1 ;
-(char)_canCloseLastTab;
-(void)_addNewActiveTiltedTabViewTabWithNavigationDestination:(id)arg1 ;
-(id)_cachedContentImageForTabDocument:(id)arg1 allowScaledImage:(char)arg2 ;
-(char)_document:(id)arg1 matchesSearchText:(id)arg2 ;
-(void)_updateTabSnapshotsWithIdentifier:(id)arg1 animated:(char)arg2 ;
-(void)_updateUserActivityTimerFired;
-(void)_cancelPendingUpdateUserActivityTimer;
-(void)tabOverviewWillPresent:(id)arg1 ;
-(void)tabOverviewDidDismiss:(id)arg1 ;
-(void)tabOverviewDidBeginDismissal:(id)arg1 ;
-(void)tabOverviewDidCancelDismissal:(id)arg1 ;
-(id)currentItemForTabOverview:(id)arg1 ;
-(void)tabOverview:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(char)tabOverviewCanSwipeToClose:(id)arg1 ;
-(void)tabOverviewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(float)tabOverview:(id)arg1 headerHeightForItem:(id)arg2 ;
-(id)tabOverview:(id)arg1 borrowContentViewForItem:(id)arg2 topBackdropHeight:(float)arg3 ;
-(void)tabOverview:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(id)blankSnapshotForTabOverview:(id)arg1 ;
-(id)snapshotForTabOverview:(id)arg1 item:(id)arg2 ;
-(char)tabOverview:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3 ;
-(void)tabOverview:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(char)tabOverview:(id)arg1 canBeginDragInteractionForItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 didBeginDragInteractionForItem:(id)arg2 point:(CGPoint)arg3 anchorPoint:(CGPoint)arg4 zPosition:(float)arg5 ;
-(void)tabOverview:(id)arg1 didUpdateDragInteractionPoint:(CGPoint)arg2 ;
-(void)tabOverview:(id)arg1 didEndDragInteractionAtPoint:(CGPoint)arg2 ;
-(void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)tabSnapshotCacheDidFinishUpdating:(id)arg1 ;
-(char)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2 ;
-(char)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1 ;
-(void)tabBarAddTab:(id)arg1 ;
-(void)tabDocumentDidUpdateUUID:(id)arg1 ;
-(void)invalidateSnapshotForTabDocument:(id)arg1 ;
-(id)cachedContentImageForTabDocument:(id)arg1 ;
-(char)tabExposeButtonIndicatorExcludesBlankDocuments;
-(UIButton *)tiltedTabViewPrivateBrowsingButton;
-(char)snapshotsAreEnabled;
-(char)shouldDeferSnapshotRequest;
-(void)_saveStateFromTimer:(id)arg1 ;
-(void)_setSaveStateTimer:(id)arg1 ;
-(void)_clearStateValidateTimer;
-(void)_validateSavedState:(id)arg1 ;
-(void)_updateSavedStateValidity:(char)arg1 ;
-(id)_persistentStateDictionaryForTabs:(id)arg1 ;
-(unsigned)_indexOfActiveTab:(id)arg1 tabDocuments:(id)arg2 ;
-(void)_persistAllTabStates:(id)arg1 needsValidate:(char)arg2 ;
-(id)_tabStatesForTabs:(id)arg1 quickUpdate:(char)arg2 ;
-(void)_prepareBrowserWindowDataIncludingTabState:(char)arg1 forQuickUpdate:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)saveStateInBackground:(char)arg1 needsValidate:(char)arg2 ;
-(void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(char)arg4 restoredActiveDocumentIndex:(unsigned)arg5 ;
-(void)_removeCurrentBackForwardItemFromTabDocument:(id)arg1 ;
-(void)setStateNeedsSaved;
-(void)setPrivateBrowsingEnabled:(char)arg1 ;
-(void)dealloc;
-(TabBar *)tabBar;
-(char)isPrivateBrowsingEnabled;
@end

