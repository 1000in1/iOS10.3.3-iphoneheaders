/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 11:25:41 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /Applications/Videos.app/Videos
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Videos/VideosRentalDataProtocol.h>

@protocol OS_dispatch_queue;
@class NSDate, NSNumber, MPMediaItem, VideosDownloadMetadata, VideosUserNotification, NSObject, NSDictionary, NSString, MPStoreDownload;

@interface VideosRentalData : NSObject <VideosRentalDataProtocol> {

	VideosUserNotification* _alert;
	int _deferRentalEventsCount;
	NSObject*<OS_dispatch_queue> _dispatchQueue;
	char _failed;
	NSDictionary* _fileProcessorInfo;
	char _isPlaying;
	char _pendingAction;
	char _loaded;
	NSDate* _playbackDate;
	int _bagError;
	VideosDownloadMetadata* _downloadMetadata;
	MPMediaItem* _mediaItem;

}

@property (copy,readonly) NSString * mediaPath; 
@property (readonly) MPStoreDownload * storeDownload; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) NSDate * nextEventDate; 
@property (readonly) NSNumber * rentalIdentifier; 
@property (readonly) NSDate * expirationDate; 
@property (readonly) double playbackTimeRemaining; 
@property (readonly) int rentalState; 
@property (readonly) MPMediaItem * mediaItem;                                                //@synthesize mediaItem=_mediaItem - In the implementation block
@property (readonly) int rentalType; 
@property (readonly) int assetType; 
@property (readonly) char willExpireSoon; 
@property (getter=isExpired,readonly) char expired; 
@property (getter=isPlaying) char playing; 
@property (readonly) int bagError; 
@property (nonatomic,retain) VideosDownloadMetadata * downloadMetadata;                      //@synthesize downloadMetadata=_downloadMetadata - In the implementation block
@property (getter=isDeferringRentalEvents,readonly) char deferringRentalEvents; 
+(char)_shouldReadDemoRentalInfoForMediaItem:(id)arg1 ;
-(int)rentalState;
-(void)synchronizeLocalData;
-(void)performActionForLocalNotification;
-(void)performDeferredLocalNotifications;
-(void)resetForReason:(unsigned)arg1 ;
-(void)setFileProcessorInfo:(id)arg1 ;
-(void)setBagError:(int)arg1 ;
-(void)beginDeferringRentalEvents;
-(void)endDeferringRentalEvents;
-(NSDate *)nextEventDate;
-(NSNumber *)rentalIdentifier;
-(double)playbackTimeRemaining;
-(int)rentalType;
-(char)willExpireSoon;
-(int)bagError;
-(char)isDeferringRentalEvents;
-(void)_loadDemoRentalInfoFromMediaItem:(id)arg1 ;
-(void)_setFileProcessorInfo:(id)arg1 ;
-(id)_nextEventDate;
-(void)_setPendingAction:(char)arg1 ;
-(void)_performActionForEventWithTimeUntilExpiration:(double)arg1 ;
-(char)_pendingAction;
-(id)_playbackEndDate;
-(id)_rentalEndDate;
-(void)_showAlertForTimeUntilExpiration:(double)arg1 ;
-(id)_newAlertTitleForTimeUntilExpiration:(double)arg1 ;
-(id)_newAlertMessageForTimeUntilExpiration:(double)arg1 ;
-(void)_refreshAlert;
-(id)_expirationDate;
-(VideosDownloadMetadata *)downloadMetadata;
-(void)setDownloadMetadata:(VideosDownloadMetadata *)arg1 ;
-(id)init;
-(NSString *)description;
-(char)isPlaying;
-(NSDate *)expirationDate;
-(id)initWithMediaItem:(id)arg1 ;
-(MPStoreDownload *)storeDownload;
-(void)setPlaying:(char)arg1 ;
-(MPMediaItem *)mediaItem;
-(NSString *)mediaPath;
-(void)setLoaded:(char)arg1 ;
-(int)assetType;
-(void)setFailed:(char)arg1 ;
-(char)isExpired;
@end

