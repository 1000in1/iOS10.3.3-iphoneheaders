/*
* This header is generated by classdump-dyld 1.0
* on Friday, December 29, 2017 at 6:39:06 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /Applications/MobileNotes.app/MobileNotes
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MobileNotes/MobileNotes-Structs.h>
#import <MobileNotes/ICDrawingView.h>
#import <UIKit/UIGestureRecognizerDelegate.h>

@class ICRulerGestureRecognizer, NSTimer, ICRulerLayer, CALayer, CATextLayer, _UIFeedbackImpactBehavior, NSString;

@interface ICDrawingRulerView : ICDrawingView <UIGestureRecognizerDelegate> {

	char _isInteractingWithRuler;
	char _isInlineResizing;
	char _isExpandedInline;
	char _rulerWasShownViaGesture;
	char _rulerIsRotating;
	char _canRulerSnapToAngle;
	char _isRulerDrawingMovingToEndOfRuler;
	char _lastTouchWasMaskedByRuler;
	char _rulerSnappedToAngle;
	ICRulerGestureRecognizer* _rulerGestureRecognizer;
	NSTimer* _imageTransformTimer;
	float _initialDrawingBoundsYOrigin;
	ICRulerLayer* _rulerLayer;
	CALayer* _rulerAngleMarker;
	CALayer* _rulerAngleTick;
	CATextLayer* _rulerAngleText;
	CALayer* _rulerDistanceHUD;
	CATextLayer* _rulerDistanceText;
	float _currentTValueForSnappedDrawing;
	float _minTValueForSnappedDrawing;
	float _maxTValueForSnappedDrawing;
	float _originTValueForSnappedDrawing;
	float _rulerZoomStartCenterTValueOnScreen;
	float _rulerZoomStartScale;
	_UIFeedbackImpactBehavior* _snapImpactBehavior;
	SCD_Struct_IC27 _rulerState;
	SCD_Struct_IC27 _previousRulerState;
	CGAffineTransform _rulerTransform;
	CGAffineTransform _rulerStartTransform;
	CGAffineTransform _rulerZoomStartTransform;

}

@property (nonatomic,retain) NSTimer * imageTransformTimer;                                  //@synthesize imageTransformTimer=_imageTransformTimer - In the implementation block
@property (assign,nonatomic) float initialDrawingBoundsYOrigin;                              //@synthesize initialDrawingBoundsYOrigin=_initialDrawingBoundsYOrigin - In the implementation block
@property (assign,nonatomic) char isInlineResizing;                                          //@synthesize isInlineResizing=_isInlineResizing - In the implementation block
@property (assign,nonatomic) char isExpandedInline;                                          //@synthesize isExpandedInline=_isExpandedInline - In the implementation block
@property (nonatomic,retain) ICRulerLayer * rulerLayer;                                      //@synthesize rulerLayer=_rulerLayer - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerTransform;                               //@synthesize rulerTransform=_rulerTransform - In the implementation block
@property (nonatomic,retain) CALayer * rulerAngleMarker;                                     //@synthesize rulerAngleMarker=_rulerAngleMarker - In the implementation block
@property (nonatomic,retain) CALayer * rulerAngleTick;                                       //@synthesize rulerAngleTick=_rulerAngleTick - In the implementation block
@property (nonatomic,retain) CATextLayer * rulerAngleText;                                   //@synthesize rulerAngleText=_rulerAngleText - In the implementation block
@property (nonatomic,retain) CALayer * rulerDistanceHUD;                                     //@synthesize rulerDistanceHUD=_rulerDistanceHUD - In the implementation block
@property (nonatomic,retain) CATextLayer * rulerDistanceText;                                //@synthesize rulerDistanceText=_rulerDistanceText - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerStartTransform;                          //@synthesize rulerStartTransform=_rulerStartTransform - In the implementation block
@property (assign,nonatomic) SCD_Struct_IC27 rulerState;                                     //@synthesize rulerState=_rulerState - In the implementation block
@property (assign,nonatomic) SCD_Struct_IC27 previousRulerState;                             //@synthesize previousRulerState=_previousRulerState - In the implementation block
@property (assign,nonatomic) char rulerWasShownViaGesture;                                   //@synthesize rulerWasShownViaGesture=_rulerWasShownViaGesture - In the implementation block
@property (assign,nonatomic) char rulerIsRotating;                                           //@synthesize rulerIsRotating=_rulerIsRotating - In the implementation block
@property (assign,nonatomic) char canRulerSnapToAngle;                                       //@synthesize canRulerSnapToAngle=_canRulerSnapToAngle - In the implementation block
@property (assign,nonatomic) char isRulerDrawingMovingToEndOfRuler;                          //@synthesize isRulerDrawingMovingToEndOfRuler=_isRulerDrawingMovingToEndOfRuler - In the implementation block
@property (assign,nonatomic) char isInteractingWithRuler;                                    //@synthesize isInteractingWithRuler=_isInteractingWithRuler - In the implementation block
@property (assign,nonatomic) float currentTValueForSnappedDrawing;                           //@synthesize currentTValueForSnappedDrawing=_currentTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) float minTValueForSnappedDrawing;                               //@synthesize minTValueForSnappedDrawing=_minTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) float maxTValueForSnappedDrawing;                               //@synthesize maxTValueForSnappedDrawing=_maxTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) float originTValueForSnappedDrawing;                            //@synthesize originTValueForSnappedDrawing=_originTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) float rulerZoomStartCenterTValueOnScreen;                       //@synthesize rulerZoomStartCenterTValueOnScreen=_rulerZoomStartCenterTValueOnScreen - In the implementation block
@property (assign,nonatomic) float rulerZoomStartScale;                                      //@synthesize rulerZoomStartScale=_rulerZoomStartScale - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerZoomStartTransform;                      //@synthesize rulerZoomStartTransform=_rulerZoomStartTransform - In the implementation block
@property (assign,nonatomic) char lastTouchWasMaskedByRuler;                                 //@synthesize lastTouchWasMaskedByRuler=_lastTouchWasMaskedByRuler - In the implementation block
@property (nonatomic,retain) _UIFeedbackImpactBehavior * snapImpactBehavior;                 //@synthesize snapImpactBehavior=_snapImpactBehavior - In the implementation block
@property (assign,nonatomic) char rulerSnappedToAngle;                                       //@synthesize rulerSnappedToAngle=_rulerSnappedToAngle - In the implementation block
@property (nonatomic,retain) ICRulerGestureRecognizer * rulerGestureRecognizer;              //@synthesize rulerGestureRecognizer=_rulerGestureRecognizer - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)showRuler;
-(void)hideRulerAnimated:(char)arg1 ;
-(id)initWithFrame:(CGRect)arg1 editable:(char)arg2 drawingController:(id)arg3 ;
-(void)incrementRulerAngleBy:(float)arg1 ;
-(void)makeRulerVertical;
-(void)makeRulerHorizontal;
-(void)resetRuler;
-(void)setZooming:(char)arg1 ;
-(ICRulerGestureRecognizer *)rulerGestureRecognizer;
-(void)hideUI;
-(void)resetRulerTransform;
-(char)isInteractingWithRuler;
-(NSTimer *)imageTransformTimer;
-(void)setImageTransformTimer:(NSTimer *)arg1 ;
-(void)updateRulerTickMarkImage;
-(void)startRulerDrawing;
-(void)endRulerDrawing;
-(void)cancelNonDrawingGestures;
-(char)viewPointInRuler:(CGPoint)arg1 ;
-(void)updateRulerMarkerForLocation:(CGPoint)arg1 firstTouch:(char)arg2 ;
-(float)initialDrawingBoundsYOrigin;
-(void)setInitialDrawingBoundsYOrigin:(float)arg1 ;
-(void)setupRulerGesture;
-(ICRulerLayer *)rulerLayer;
-(void)setRulerZoomStartTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)rulerZoomStartTransform;
-(float)getRulerCenterTValueOnScreenForTransfrom:(CGAffineTransform)arg1 ;
-(void)setRulerZoomStartCenterTValueOnScreen:(float)arg1 ;
-(CGAffineTransform)canvasTransform;
-(void)setRulerZoomStartScale:(float)arg1 ;
-(void)rulerMoveGesture:(id)arg1 ;
-(void)setRulerGestureRecognizer:(ICRulerGestureRecognizer *)arg1 ;
-(CGAffineTransform)ensureRulerFullyOnscreen:(CGAffineTransform)arg1 ;
-(char)compactRuler;
-(id)rulerBackgroundImage;
-(float)rulerZoomStartCenterTValueOnScreen;
-(float)rulerZoomStartScale;
-(CGAffineTransform)pixelSnapRulerTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)defaultRulerTransfrom;
-(void)setRulerStartTransform:(CGAffineTransform)arg1 ;
-(void)setRulerIsRotating:(char)arg1 ;
-(void)setRulerLayer:(ICRulerLayer *)arg1 ;
-(CGAffineTransform)rulerStartTransform;
-(id)addOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 toOpacity:(float)arg3 ;
-(void)hideRuler;
-(void)setRulerState:(SCD_Struct_IC27)arg1 ;
-(void)removeRulerMarkers;
-(CALayer *)rulerAngleMarker;
-(CALayer *)rulerDistanceHUD;
-(void)setRulerAngleMarker:(CALayer *)arg1 ;
-(void)setRulerWasShownViaGesture:(char)arg1 ;
-(char)rulerIsRotating;
-(void)updateAngleWithAngleMarkerPosition:(CGPoint)arg1 ;
-(char)shouldUseLargestRulerTextFontSize;
-(id)rulerDialImage;
-(void)setRulerAngleTick:(CALayer *)arg1 ;
-(id)rulerDialLevelImage;
-(CALayer *)rulerAngleTick;
-(void)setRulerAngleText:(CATextLayer *)arg1 ;
-(CATextLayer *)rulerAngleText;
-(SCD_Struct_IC27)rulerState;
-(void)setCanRulerSnapToAngle:(char)arg1 ;
-(void)setPreviousRulerState:(SCD_Struct_IC27)arg1 ;
-(SCD_Struct_IC27)previousRulerState;
-(char)canRulerSnapToAngle;
-(char)rulerSnappedToAngle;
-(void)setRulerSnappedToAngle:(char)arg1 ;
-(_UIFeedbackImpactBehavior *)snapImpactBehavior;
-(CGAffineTransform)angleSnapRulerTransform:(CGAffineTransform)arg1 aroundOrigin:(CGPoint)arg2 ;
-(void)updateAngle:(id)arg1 ;
-(void)setIsInteractingWithRuler:(char)arg1 ;
-(void)setSnapImpactBehavior:(_UIFeedbackImpactBehavior *)arg1 ;
-(void)updateRuler:(id)arg1 ;
-(char)rulerWasShownViaGesture;
-(void)resetRulerTouches;
-(float)maxTValueForSnappedDrawing;
-(float)minTValueForSnappedDrawing;
-(CATextLayer *)rulerDistanceText;
-(float)originTValueForSnappedDrawing;
-(void)setIsRulerDrawingMovingToEndOfRuler:(char)arg1 ;
-(void)setRulerDistanceHUD:(CALayer *)arg1 ;
-(void)setRulerDistanceText:(CATextLayer *)arg1 ;
-(void)addScaleAndOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(float)arg3 toScale:(float)arg4 fromAlpha:(float)arg5 toAlpha:(float)arg6 ;
-(float)currentTValueForSnappedDrawing;
-(CGPoint)getRulerCenterLineOriginAndTangent:(CGPoint*)arg1 ;
-(void)setCurrentTValueForSnappedDrawing:(float)arg1 ;
-(void)setMinTValueForSnappedDrawing:(float)arg1 ;
-(void)setMaxTValueForSnappedDrawing:(float)arg1 ;
-(void)setOriginTValueForSnappedDrawing:(float)arg1 ;
-(void)updateDistanceMarkerWithSpacing:(float)arg1 ;
-(float)rulerAlignInset;
-(char)lastTouchWasMaskedByRuler;
-(void)setLastTouchWasMaskedByRuler:(char)arg1 ;
-(float)rulerTickMarkInset;
-(id)addScaleAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(float)arg3 toScale:(float)arg4 ;
-(char)isInlineResizing;
-(void)setIsInlineResizing:(char)arg1 ;
-(char)isExpandedInline;
-(void)setIsExpandedInline:(char)arg1 ;
-(char)isRulerDrawingMovingToEndOfRuler;
-(char)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(void)touchesMoved:(id)arg1 withEvent:(id)arg2 ;
-(void)touchesEnded:(id)arg1 withEvent:(id)arg2 ;
-(void)touchesCancelled:(id)arg1 withEvent:(id)arg2 ;
-(void)animationDidStop:(id)arg1 finished:(char)arg2 ;
-(id)accessibilityElements;
-(void)setRulerTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)rulerTransform;
-(float)rulerWidth;
-(id)_accessibilityHitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
@end

