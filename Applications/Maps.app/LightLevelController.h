/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 11:24:44 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /Applications/Maps.app/Maps
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Maps/MKAmbientLightMonitorObserver.h>
#import <libobjc.A.dylib/MKLocationManagerObserver.h>

@class CarObserverHashTable, NSDate, CLLocation, NSTimer, NSString;

@interface LightLevelController : NSObject <MKAmbientLightMonitorObserver, MKLocationManagerObserver> {

	CarObserverHashTable* _observers;
	int _mapsLightLevelChangeNotificationToken;
	char _useAmbientLightLevel;
	char _useAstronomicalLightLevel;
	char _observingAmbientLight;
	char _observingLocation;
	char _isAstronomicalDaylight;
	int _currentLightLevel;
	int _ambientLightLevel;
	NSDate* _lastAstronomicalCheckDate;
	CLLocation* _lastAstronomicalCheckLocation;
	NSTimer* _astronomicalInvalidationTimer;
	CLLocation* _location;
	int _debugLightLevel;

}

@property (assign,nonatomic) int currentLightLevel;                                   //@synthesize currentLightLevel=_currentLightLevel - In the implementation block
@property (assign) int ambientLightLevel;                                             //@synthesize ambientLightLevel=_ambientLightLevel - In the implementation block
@property (assign,nonatomic) char useAmbientLightLevel;                               //@synthesize useAmbientLightLevel=_useAmbientLightLevel - In the implementation block
@property (assign,nonatomic) char useAstronomicalLightLevel;                          //@synthesize useAstronomicalLightLevel=_useAstronomicalLightLevel - In the implementation block
@property (getter=isObservingAmbientLight) char observingAmbientLight;                //@synthesize observingAmbientLight=_observingAmbientLight - In the implementation block
@property (getter=isObservingLocation) char observingLocation;                        //@synthesize observingLocation=_observingLocation - In the implementation block
@property (assign,nonatomic) char isAstronomicalDaylight;                             //@synthesize isAstronomicalDaylight=_isAstronomicalDaylight - In the implementation block
@property (readonly) char haveValidAstronomicalData; 
@property (nonatomic,retain) NSDate * lastAstronomicalCheckDate;                      //@synthesize lastAstronomicalCheckDate=_lastAstronomicalCheckDate - In the implementation block
@property (nonatomic,retain) CLLocation * lastAstronomicalCheckLocation;              //@synthesize lastAstronomicalCheckLocation=_lastAstronomicalCheckLocation - In the implementation block
@property (nonatomic,retain) NSTimer * astronomicalInvalidationTimer;                 //@synthesize astronomicalInvalidationTimer=_astronomicalInvalidationTimer - In the implementation block
@property (nonatomic,retain) CLLocation * location;                                   //@synthesize location=_location - In the implementation block
@property (assign,nonatomic) int debugLightLevel;                                     //@synthesize debugLightLevel=_debugLightLevel - In the implementation block
@property (readonly) char shouldUseNightMode; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)shouldUseNightMode;
+(char)shouldUseNightModeForLightLevel:(int)arg1 ;
+(void)initialize;
+(id)sharedController;
-(void)_updateExternalAccessory:(id)arg1 ;
-(void)reloadForChangedLightLevelTrackers;
-(void)_updateLightLevel;
-(char)shouldUseNightMode;
-(void)setUseAmbientLightLevel:(char)arg1 ;
-(void)setUseAstronomicalLightLevel:(char)arg1 ;
-(void)setCurrentLightLevel:(int)arg1 ;
-(char)haveValidAstronomicalData;
-(void)setIsAstronomicalDaylight:(char)arg1 ;
-(void)setDebugLightLevel:(int)arg1 ;
-(int)_lightLevelExternalAccessory;
-(int)_lightLevelAstronomical;
-(void)_invalidateAstronomicalData;
-(void)_updateTrackers;
-(void)_startMonitoringAmbientLight;
-(void)_stopMonitoringAmbientLight;
-(void)_startObservingLocation;
-(void)_stopObservingLocation;
-(void)_setLocationIfNeeded:(id)arg1 forReason:(id)arg2 ;
-(int)currentLightLevel;
-(void)setAmbientLightLevel:(int)arg1 ;
-(char)useAmbientLightLevel;
-(char)useAstronomicalLightLevel;
-(char)isObservingAmbientLight;
-(void)setObservingAmbientLight:(char)arg1 ;
-(char)isObservingLocation;
-(void)setObservingLocation:(char)arg1 ;
-(char)isAstronomicalDaylight;
-(NSDate *)lastAstronomicalCheckDate;
-(void)setLastAstronomicalCheckDate:(NSDate *)arg1 ;
-(CLLocation *)lastAstronomicalCheckLocation;
-(void)setLastAstronomicalCheckLocation:(CLLocation *)arg1 ;
-(NSTimer *)astronomicalInvalidationTimer;
-(void)setAstronomicalInvalidationTimer:(NSTimer *)arg1 ;
-(int)debugLightLevel;
-(id)init;
-(void)dealloc;
-(void)addObserver:(id)arg1 ;
-(void)removeObserver:(id)arg1 ;
-(CLLocation *)location;
-(void)setLocation:(CLLocation *)arg1 ;
-(void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2 ;
-(void)locationManagerDidReset:(id)arg1 ;
-(char)locationManagerShouldPauseLocationUpdates:(id)arg1 ;
-(void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3 ;
-(void)locationManagerUpdatedLocation:(id)arg1 ;
-(void)locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3 ;
-(int)ambientLightLevel;
-(void)ambientLightMonitorUpdated:(id)arg1 ;
-(void)locationManagerDidPauseLocationUpdates:(id)arg1 ;
-(void)locationManagerDidResumeLocationUpdates:(id)arg1 ;
-(void)_timeDidChangeSignificantly;
@end

