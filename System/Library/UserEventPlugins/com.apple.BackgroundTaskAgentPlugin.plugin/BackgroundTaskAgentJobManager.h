/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 6:40:39 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/UserEventPlugins/com.apple.BackgroundTaskAgentPlugin.plugin/com.apple.BackgroundTaskAgentPlugin
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_xpc_object;
#import <com.apple.BackgroundTaskAgentPlugin/com.apple.BackgroundTaskAgentPlugin-Structs.h>
@class BackgroundTaskAgentMonitor, NSObject, NSDate, PCPersistentTimer, PCSimpleTimer;

@interface BackgroundTaskAgentJobManager : NSObject {

	CFDictionaryRef _jobList;
	BackgroundTaskAgentMonitor* _monitor;
	void* _userEventAgentProvider;
	double _batteryLevelNotificationThreshold;
	double _nextHardDeadlineTime;
	double _nextSoftDeadlineTime;
	NSObject*<OS_xpc_object> _nextHardDeadlineJob;
	NSObject*<OS_xpc_object> _nextSoftDeadlineJob;
	NSObject*<OS_xpc_object> _lastHardDeadlineJob;
	NSDate* _lastFireDate;
	PCPersistentTimer* _hardTimer;
	PCSimpleTimer* _softTimer;
	char _shouldScheduleConditionTimer;
	char _hasPendingJobs;

}

@property (nonatomic,readonly) CFDictionaryRef jobList;                           //@synthesize jobList=_jobList - In the implementation block
@property (nonatomic,readonly) BackgroundTaskAgentMonitor * monitor;              //@synthesize monitor=_monitor - In the implementation block
@property (assign,nonatomic) char hasPendingJobs;                                 //@synthesize hasPendingJobs=_hasPendingJobs - In the implementation block
@property (nonatomic,readonly) void* userEventAgentProvider;                      //@synthesize userEventAgentProvider=_userEventAgentProvider - In the implementation block
-(void)adjustTime:(double)arg1 ;
-(void)hardTimerFired:(id)arg1 ;
-(char)hasPendingJobs;
-(void)postClientNotificationForJob:(id)arg1 withToken:(CFNumberRef)arg2 ;
-(void)removeJob:(id)arg1 withToken:(CFNumberRef)arg2 ;
-(void)processJobListImmediately;
-(void)processJobList;
-(void)BackgroundTaskAgentMonitoredConditionChangedWithTimeChange:(double*)arg1 ;
-(void)processPendingJobs:(id)arg1 ;
-(void)printJob:(id)arg1 withToken:(CFNumberRef)arg2 withPrefix:(const char*)arg3 withLogLevel:(int)arg4 withJobStatus:(char)arg5 ;
-(void)hasJobStatusChanged:(id)arg1 withToken:(CFNumberRef)arg2 withCurrentDeviceState:(SCD_Struct_Ba2*)arg3 withPointerToExpiredJobs:(_CFDictionary*)arg4 ;
-(void)scheduleTimerIfNecessary;
-(void)evalJobConditions:(id)arg1 withCurrentDeviceState:(SCD_Struct_Ba2*)arg2 andStoreJobStatusIn:(SCD_Struct_Ba3*)arg3 ;
-(void)pcTimerFired:(id)arg1 ;
-(CFDictionaryRef)jobList;
-(char)areNetworkingRequirementsMetForJob:(id)arg1 withCurrentDeviceState:(SCD_Struct_Ba2*)arg2 ;
-(id)initWithUserEventAgentProvider:(void*)arg1 ;
-(void)newJob:(id)arg1 withToken:(unsigned long long)arg2 ;
-(void)cancelJobWithToken:(unsigned long long)arg1 ;
-(char)validateAndAddDefaults:(id)arg1 ;
-(void)addJobToQueue:(id)arg1 withToken:(CFNumberRef)arg2 ;
-(void)printCurrentDeviceState:(SCD_Struct_Ba2*)arg1 ;
-(void*)userEventAgentProvider;
-(void)printJobListwithPrefix:(const char*)arg1 withLogLevel:(int)arg2 withJobStatus:(char)arg3 ;
-(void)setHasPendingJobs:(char)arg1 ;
-(void)getCurrentDeviceState:(SCD_Struct_Ba2*)arg1 ;
-(void)dealloc;
-(BackgroundTaskAgentMonitor *)monitor;
-(void)cancelTimer;
@end

