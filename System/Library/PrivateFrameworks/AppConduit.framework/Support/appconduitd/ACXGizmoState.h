/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 12:56:14 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/AppConduit.framework/Support/appconduitd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class NSObject, ACXDevice, NPSDomainAccessor, NSMutableDictionary, NSDictionary;

@interface ACXGizmoState : NSObject {

	char _needsReunionSync;
	char _isNewWatch;
	NSObject*<OS_dispatch_queue> _stateQueue;
	ACXDevice* _device;
	NPSDomainAccessor* _npsDomain;
	NSMutableDictionary* _appStates;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> stateQueue;              //@synthesize stateQueue=_stateQueue - In the implementation block
@property (nonatomic,readonly) ACXDevice * device;                                   //@synthesize device=_device - In the implementation block
@property (nonatomic,readonly) NPSDomainAccessor * npsDomain;                        //@synthesize npsDomain=_npsDomain - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * appStates;                        //@synthesize appStates=_appStates - In the implementation block
@property (readonly) char alwaysInstallApps; 
@property (readonly) char initiallyInstallAllApps; 
@property (assign) char needsReunionSync; 
@property (readonly) char isNewWatch;                                                //@synthesize isNewWatch=_isNewWatch - In the implementation block
@property (copy,readonly) NSDictionary * pendingApps; 
@property (readonly) char gizmoIsActivePairedDevice; 
-(void)setNeedsReunionSync:(char)arg1 ;
-(char)isNewWatch;
-(void)dumpCurrentStateToLog;
-(char)initiallyInstallAllApps;
-(void)markInstalledAsPending;
-(void)noteNewApps:(id)arg1 updatedApps:(id)arg2 removedApps:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)noteTrustAddedApps:(id)arg1 trustRemovedApps:(id)arg2 completion:(/*^block*/id)arg3 ;
-(char)needsReunionSync;
-(char)setInstallStatusForApps:(id)arg1 sendNotification:(char)arg2 withUpdatePredicate:(/*^block*/id)arg3 ;
-(void)clearPendingInstallations;
-(void)setInstallStatus:(unsigned)arg1 forApp:(id)arg2 ;
-(void)recordApplicationInstallationMetrics:(id)arg1 automaticInstall:(char)arg2 isUpdate:(char)arg3 ;
-(id)preferencesForApplicationWithIdentifier:(id)arg1 ;
-(char)alwaysInstallApps;
-(char)iterateInstallStatusAndClearNeedsReunionSyncWithIterator:(/*^block*/id)arg1 completion:(/*^block*/id)arg2 ;
-(NSDictionary *)pendingApps;
-(char)setInstallStatusForApps:(id)arg1 ;
-(void)purgeInstallStatusForApps:(id)arg1 ;
-(void)_init_loadState;
-(NPSDomainAccessor *)npsDomain;
-(void)setAppStates:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)appStates;
-(char)_init_migrateSockPuppetSettings;
-(void)_onQueue_saveState;
-(char)gizmoIsActivePairedDevice;
-(int)exportedAppStateForDeviceState:(unsigned)arg1 ;
-(char)_onQueue_setInstallStatusForApps:(id)arg1 sendNotification:(char)arg2 withUpdatePredicate:(/*^block*/id)arg3 ;
-(void)_enumerateApplicationStateUsingBlock:(/*^block*/id)arg1 ;
-(void)_removeSockPuppetSettings;
-(unsigned)installStatusForApp:(id)arg1 ;
-(id)uniqueInstallIDForApp:(id)arg1 ;
-(NSObject*<OS_dispatch_queue>)stateQueue;
-(ACXDevice *)device;
-(id)initWithDevice:(id)arg1 ;
@end

