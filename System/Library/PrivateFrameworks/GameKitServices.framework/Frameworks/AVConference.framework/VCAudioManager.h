/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 12:56:51 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <AVConference/AVConference-Structs.h>
@class NSDictionary, NSObject, AVAudioDevice, NSNumber, NSString, NSMutableDictionary, NSMutableArray;

@interface VCAudioManager : NSObject {

	int direction;
	int audioRefCount;
	int connectionRefCount;
	int hardwareSampleRate;
	AudioStreamBasicDescription vpioFormat;
	char usingFloat;
	char isGKVoiceChat;
	char isInMediaserverd;
	char isMicrophoneMuted;
	char enableSpeakerPhone;
	char isUsingSuppression;
	char isTetheredDisplayMode;
	int clientPID;
	NSDictionary* backMicSource;
	NSDictionary* frontMicSource;
	opaque_pthread_mutex_t audioLock;
	NSObject*<OS_dispatch_queue> cmSessionQueue;
	NSObject*<OS_dispatch_queue> inputDeviceQueue;
	tagHANDLE* hAUIO;
	AVAudioDevice* targetInputDevice;
	AVAudioDevice* targetOutputDevice;
	int inferredOperatingMode;
	int inferredDeviceRole;
	char inferredUseSpeakerMode;
	id _weakAudioRelay;
	id _weakSafeViewAudioRelay;
	double preferredHWSampleRate;
	double preferredBlockSize;
	opaqueCMSessionRef cmSession;
	int cmSessionRefCount;
	float fLastStartAudioSessionCall;
	NSDictionary* requestedSessionParams;
	NSNumber* currentClientPriority;
	NSString* currentAudioCategory;
	NSString* currentAudioMode;
	NSMutableDictionary* audioManagerClients;
	unsigned long currentVPOperatingMode;
	char currentAudioRecordingMode;
	int currentSampleRate;
	int currentMinSamplesPerFrame;
	char currentReceiverStatus;
	char isUsingBBIO;
	int requestedVPOperatingMode;
	double requestedVPSampleRate;
	AudioEventQueue_tRef eventQ;
	NSMutableArray* spkrClientList;
	NSMutableArray* micClientList;

}

@property (retain) AVAudioDevice * targetInputDevice; 
@property (retain) AVAudioDevice * targetOutputDevice; 
@property (assign,nonatomic) char isInMediaserverd; 
@property (getter=isSpeakerPhoneEnabled) char enableSpeakerPhone; 
@property (assign,nonatomic) int clientPID; 
@property (assign,nonatomic) char isUsingSuppression; 
@property (assign,nonatomic) char isGKVoiceChat; 
@property (nonatomic,readonly) char usingFloat; 
@property (assign,getter=isMicrophoneMuted,nonatomic) char microphoneMuted; 
@property (nonatomic,readonly) int inferredOperatingMode; 
+(id)defaultManager;
-(id)init;
-(void)dealloc;
-(void)setDirection:(int)arg1 ;
-(int)clientPID;
-(void)setClientPID:(int)arg1 ;
-(void)stopAudioSession;
-(id)currentInputDevice;
-(id)currentOutputDevice;
-(void)setEnableSpeakerPhone:(char)arg1 ;
-(char)isSpeakerPhoneEnabled;
-(void)startAudioIOWithFarEndVersionInfo:(VoiceIOFarEndVersionInfo*)arg1 minSamplesPerFrame:(int)arg2 internalFormat:(AudioStreamBasicDescription)arg3 allowAudioRecording:(char)arg4 operatingMode:(int)arg5 deviceRole:(int)arg6 remoteBasebandCodecType:(id)arg7 remoteBasebandCodecSampleRate:(id)arg8 completionHandler:(/*^block*/id)arg9 ;
-(void)startRelayIOWithFormat:(AudioStreamBasicDescription)arg1 deviceRole:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)stopAudioIOWithDeviceRole:(int)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)stopRelayIOWithDeviceRole:(int)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)getVpioFormat:(AudioStreamBasicDescription*)arg1 ;
-(void)addAudioIOClient:(id)arg1 ;
-(void)removeAudioIOClient:(id)arg1 ;
-(void)setIsInMediaserverd:(char)arg1 ;
-(void)setAudioSessionMode:(id)arg1 ;
-(int)inferredOperatingMode;
-(void)setRemoteBasebandCodecType:(id)arg1 sampleRate:(id)arg2 ;
-(void)setIsGKVoiceChat:(char)arg1 ;
-(char)isGKVoiceChat;
-(void)setSamplesPerFrame:(int)arg1 ;
-(void)enableMetering:(char)arg1 isInputMeter:(char)arg2 ;
-(void)setIsUsingSuppression:(char)arg1 ;
-(char)usingFloat;
-(char)isUsingSuppression;
-(void)getPreferredHWSampleRate:(double*)arg1 blockSize:(double*)arg2 ;
-(void)selectMicForDirection;
-(void)cleanupAUIOSetupWithResult:(long)arg1 completionHandler:(/*^block*/id)arg2 ignoreRefCount:(char)arg3 ;
-(unsigned long)vpOperationModeForConferenceOperatingMode:(int)arg1 deviceRole:(int)arg2 ;
-(long)resetAudioSessionProperties;
-(void)processEventQueue;
-(void)AUIOTeardown:(char)arg1 ;
-(void)AUIOSetup:(VoiceIOFarEndVersionInfo*)arg1 minSamplesPerFrame:(int)arg2 allowAudioRecording:(char)arg3 ignoreRefCount:(char)arg4 operatingMode:(int)arg5 deviceRole:(int)arg6 remoteCodecType:(unsigned long)arg7 remoteCodecSampleRate:(double)arg8 completionHandler:(/*^block*/id)arg9 ;
-(char)isInMediaserverd;
-(unsigned long)startAudioSessionWithCompletionHandler:(/*^block*/id)arg1 dispatchQueue:(id)arg2 ;
-(void)tearDownAudioSessionForced:(char)arg1 ;
-(void)tearDownAudioIO:(char)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(void)internalSetRemoteBasebandCodecType:(id)arg1 sampleRate:(id)arg2 ;
-(id)getAudioManagerClientWithPid:(id)arg1 create:(char)arg2 ;
-(char)setCurrentInputDevice:(id)arg1 ;
-(char)setCurrentOutputDevice:(id)arg1 ;
-(void)resetAudioSessionOutputPortOverride;
-(void)stopAudioManagerClient:(id)arg1 ;
-(void)setAudioSessionParameters:(id)arg1 ;
-(void)setupAudioNotifications;
-(char)projectionModeEnabledState;
-(void)setAudioSessionProperties;
-(unsigned long)setupAudioSession;
-(void)invalidateCurrentAudioParams;
-(void)setupInputBeamforming;
-(void)setupVPBlockFormat;
-(void)setSampleRate;
-(void)setBlockSize:(char)arg1 ;
-(char)forceSampleRate:(double*)arg1 ;
-(char)forceBufferFrames:(int*)arg1 ;
-(opaqueCMSessionRef)cmSessionRef;
-(char)shouldCallAudioCallbackOnAudioIOClient:(id)arg1 forDeviceRole:(int)arg2 ;
-(void)setupAudioRelayWithIO:(id)arg1 deviceRole:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)audioRelayWithDeviceRole:(int)arg1 ;
-(void)internalSetupAudioRelayWithIO:(id)arg1 deviceRole:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)handleAudioInterruption:(opaqueCMSessionRef)arg1 interruptionInfo:(CFDictionaryRef)arg2 cmd:(unsigned)arg3 ;
-(void)setBlockSizeDispatch:(char)arg1 ;
-(void)onPlaySound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(float)arg5 deviceRole:(int)arg6 ;
-(void)onCaptureSound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned long)arg9 deviceRole:(int)arg10 ;
-(void)clearTargetIODevices;
-(AVAudioDevice *)targetInputDevice;
-(void)setTargetInputDevice:(AVAudioDevice *)arg1 ;
-(AVAudioDevice *)targetOutputDevice;
-(void)setTargetOutputDevice:(AVAudioDevice *)arg1 ;
-(void)setMicrophoneMuted:(char)arg1 ;
-(char)isMicrophoneMuted;
@end

