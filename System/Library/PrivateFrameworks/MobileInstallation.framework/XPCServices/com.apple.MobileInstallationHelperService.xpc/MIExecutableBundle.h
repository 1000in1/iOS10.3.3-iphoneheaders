/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 12:57:12 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/MobileInstallation.framework/XPCServices/com.apple.MobileInstallationHelperService.xpc/com.apple.MobileInstallationHelperService
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <com.apple.MobileInstallationHelperService/com.apple.MobileInstallationHelperService-Structs.h>
#import <com.apple.MobileInstallationHelperService/MIBundle.h>

@class MIBundleContainer, NSError, MIEmbeddedWatchBundle, MICodeSigningInfo, NSString, NSURL, NSArray;

@interface MIExecutableBundle : MIBundle {

	CFBundleRef _cfBundleInstance;
	MIBundleContainer* _bundleContainer;
	unsigned _codeSignatureVerificationState;
	NSError* _wk1AppBundleError;
	MIEmbeddedWatchBundle* _wk1AppBundle;
	NSError* _wk2AppBundleError;
	MIEmbeddedWatchBundle* _wk2AppBundle;
	MICodeSigningInfo* _codeSigningInfo;
	NSError* _codeSigningInfoError;

}

@property (nonatomic,retain) NSError * wk1AppBundleError;                             //@synthesize wk1AppBundleError=_wk1AppBundleError - In the implementation block
@property (nonatomic,retain) MIEmbeddedWatchBundle * wk1AppBundle;                    //@synthesize wk1AppBundle=_wk1AppBundle - In the implementation block
@property (nonatomic,retain) NSError * wk2AppBundleError;                             //@synthesize wk2AppBundleError=_wk2AppBundleError - In the implementation block
@property (nonatomic,retain) MIEmbeddedWatchBundle * wk2AppBundle;                    //@synthesize wk2AppBundle=_wk2AppBundle - In the implementation block
@property (nonatomic,retain) MICodeSigningInfo * codeSigningInfo;                     //@synthesize codeSigningInfo=_codeSigningInfo - In the implementation block
@property (nonatomic,retain) NSError * codeSigningInfoError;                          //@synthesize codeSigningInfoError=_codeSigningInfoError - In the implementation block
@property (assign,nonatomic,__weak) MIBundleContainer * bundleContainer;              //@synthesize bundleContainer=_bundleContainer - In the implementation block
@property (nonatomic,copy,readonly) NSString * executableName; 
@property (nonatomic,readonly) NSURL * executableURL; 
@property (nonatomic,readonly) NSURL * rootSinfURL; 
@property (nonatomic,readonly) NSURL * rootSuppURL; 
@property (nonatomic,readonly) NSURL * rootSupfURL; 
@property (nonatomic,readonly) char needsSinf; 
@property (nonatomic,readonly) char hasSinf; 
@property (nonatomic,readonly) int dataContainerContentClass; 
@property (nonatomic,readonly) unsigned maxLinkedSDKVersion; 
@property (nonatomic,readonly) char hasWatchGlance; 
@property (nonatomic,readonly) char hasWatchCustomNotification; 
@property (nonatomic,readonly) unsigned char watchKitVersion; 
@property (nonatomic,readonly) char isWatchKitApp; 
@property (nonatomic,readonly) unsigned codeSignatureVerificationState;               //@synthesize codeSignatureVerificationState=_codeSignatureVerificationState - In the implementation block
@property (nonatomic,copy,readonly) NSArray * vpnPluginIdentifiers; 
@property (nonatomic,readonly) Class dataContainerClass; 
+(id)bundlesInParentBundle:(id)arg1 subDirectory:(id)arg2 matchingPredicate:(/*^block*/id)arg3 error:(id*)arg4 ;
-(id)codeSigningInfoByValidatingResources:(char)arg1 performingOnlineAuthorization:(char)arg2 ignoringCachedSigningInfo:(char)arg3 error:(id*)arg4 ;
-(id)dataContainerCreatingIfNeeded:(char)arg1 makeLive:(char)arg2 created:(char*)arg3 error:(id*)arg4 ;
-(id)watchKitAppBundleForWKVersionOrEarler:(unsigned char)arg1 error:(id*)arg2 ;
-(void)setBundleParentDirectoryURL:(id)arg1 ;
-(id)dataContainerWithError:(id*)arg1 ;
-(Class)dataContainerClass;
-(char)updateSinfWithData:(id)arg1 error:(id*)arg2 ;
-(id)fairPlaySinfInfoWithError:(id*)arg1 ;
-(id)initWithBundleInContainer:(id)arg1 withExtension:(id)arg2 error:(id*)arg3 ;
-(void)setBundleContainer:(MIBundleContainer *)arg1 ;
-(unsigned)maxLinkedSDKVersion;
-(char)validatePluginMetadataWithError:(id*)arg1 ;
-(char)needsDataContainer;
-(MIEmbeddedWatchBundle *)wk1AppBundle;
-(MIEmbeddedWatchBundle *)wk2AppBundle;
-(id)uniqueInstallIDWithError:(id*)arg1 ;
-(id)setUniqueInstallIDWithError:(id*)arg1 ;
-(char)_isGrandfatheredNonContainerized:(id)arg1 ;
-(char)_hasNonContainerizingEntitlement:(id)arg1 checkSeatbeltProfiles:(char)arg2 ;
-(unsigned)codeSignatureVerificationState;
-(int)dataContainerContentClass;
-(MICodeSigningInfo *)codeSigningInfo;
-(NSError *)codeSigningInfoError;
-(id)_codeSigningInfoFromMCM;
-(void)setCodeSigningInfo:(MICodeSigningInfo *)arg1 ;
-(char)_useInternalValidation;
-(void)setCodeSigningInfoError:(NSError *)arg1 ;
-(id)_dataContainerCreatingIfNeeded:(char)arg1 makeLive:(char)arg2 checkIfNeeded:(char)arg3 created:(char*)arg4 error:(id*)arg5 ;
-(id)watchKitV2AppBundleWithError:(id*)arg1 ;
-(id)_sinfSubPaths;
-(NSURL *)rootSinfURL;
-(id)sinfURLsWithError:(id*)arg1 ;
-(char)_writeSinfData:(id)arg1 toURLs:(id)arg2 error:(id*)arg3 ;
-(NSURL *)rootSuppURL;
-(NSURL *)rootSupfURL;
-(char)hasSinf;
-(char)_hasResource:(id)arg1 withExtension:(id)arg2 ;
-(id)watchKitV1AppBundleWithError:(id*)arg1 ;
-(NSError *)wk1AppBundleError;
-(void)setWk1AppBundle:(MIEmbeddedWatchBundle *)arg1 ;
-(void)setWk1AppBundleError:(NSError *)arg1 ;
-(NSError *)wk2AppBundleError;
-(void)setWk2AppBundle:(MIEmbeddedWatchBundle *)arg1 ;
-(void)setWk2AppBundleError:(NSError *)arg1 ;
-(id)lsInstallTypeWithError:(id*)arg1 ;
-(char)setLSInstallType:(id)arg1 error:(id*)arg2 ;
-(id)uniqueInstallIDSettingIfNotSetWithError:(id*)arg1 ;
-(char)updateMCMWithCodeSigningInfoWithError:(id*)arg1 ;
-(void)installEmbeddedProvisioningProfileWithProgress:(/*^block*/id)arg1 ;
-(char)hasNoConflictsWithOtherInstalledEntitiesForSigningInfo:(id)arg1 error:(id*)arg2 ;
-(NSArray *)vpnPluginIdentifiers;
-(char)makeExecutableWithError:(id*)arg1 ;
-(char)replicateRootSinfWithError:(id*)arg1 ;
-(void)removeSinf;
-(char)needsSinf;
-(char)validateSinfWithError:(id*)arg1 ;
-(char)hasWatchCustomNotification;
-(char)hasWatchGlance;
-(char)hasOnlyAllowedWatchKitAppInfoPlistKeysForWatchKitVersion:(unsigned char)arg1 error:(id*)arg2 ;
-(MIBundleContainer *)bundleContainer;
-(NSURL *)executableURL;
-(unsigned char)watchKitVersion;
-(NSString *)executableName;
-(void)dealloc;
-(char)_validateWithError:(id*)arg1 ;
-(char)isWatchKitApp;
@end

