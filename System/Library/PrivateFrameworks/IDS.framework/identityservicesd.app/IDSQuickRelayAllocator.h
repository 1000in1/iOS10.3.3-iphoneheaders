/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 12:57:01 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/IDSPushHandlerDelegate.h>

@class IDSPushHandler, NSMutableDictionary, NSMutableArray, NSMutableSet, NSString;

@interface IDSQuickRelayAllocator : NSObject <IDSPushHandlerDelegate> {

	IDSPushHandler* _pushHandler;
	NSMutableDictionary* _requestIDToSession;
	NSMutableDictionary* _sessionToAllocations;
	NSMutableArray* _sessionInfoRequiredKeys;
	NSMutableSet* _pendingRecipientsAcceptedSessions;
	NSMutableDictionary* _pendingInitiatorsAcceptedSessionsWithToken;
	NSMutableDictionary* _requestIDToAllocateTime;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(void)setupNewAllocation:(id)arg1 sessionID:(id)arg2 fromIdentity:(id)arg3 fromURI:(id)arg4 fromService:(id)arg5 options:(id)arg6 connectReadyHandler:(/*^block*/id)arg7 ;
-(void)requestAllocationForRecipient:(id)arg1 ;
-(id)getRelaySessionIDForIDSSessionID:(id)arg1 pushToken:(id)arg2 ;
-(void)setInitiatorsAcceptedToken:(id)arg1 pushToken:(id)arg2 ;
-(int)getServerProviderForIDSSessionID:(id)arg1 ;
-(void)enablePushHandler:(char)arg1 ;
-(void)reportAWDAllocatorEvent:(unsigned)arg1 transport:(int)arg2 localRAT:(unsigned)arg3 duration:(unsigned long long)arg4 ;
-(id)getAdditionalAllocationForAddress:(id)arg1 selfAddress:(unsigned)arg2 relaySessionID:(id)arg3 ;
-(void)setupNewAllocationToDefaultPairedDevice:(id)arg1 connectReadyHandler:(/*^block*/id)arg2 ;
-(void)invalidateAllocation:(id)arg1 ;
-(void)_setSessionInfoRequiredKeys;
-(void)_addAllocationForSession:(id)arg1 allocation:(id)arg2 ;
-(char)_startQRConnectionWithDefaults:(id)arg1 ;
-(id)_setupAllocation:(id)arg1 fromURI:(id)arg2 sessionID:(id)arg3 options:(id)arg4 connectReadyHandler:(/*^block*/id)arg5 ;
-(id)_parseQuickRelayDefaults;
-(void)_startQRConnectionForSession:(id)arg1 isInitiatorsAcceptedSession:(char)arg2 ;
-(id)_findAllocationListForSessionID:(id)arg1 ;
-(id)getPushTokenForRelaySessionID:(id)arg1 relaySessionID:(id)arg2 ;
-(id)_createSessionInfoFromResponsePayload:(id)arg1 ;
-(id)_findAllocationForSessionID:(id)arg1 requestIDStr:(id)arg2 ;
-(char)_isDuplicateResponse:(id)arg1 newResponse:(id)arg2 ;
-(id)_getUUIDStringFromNSData:(id)arg1 ;
-(char)_hasSessionInfoRequiredKeys:(id)arg1 ;
-(void)_sendAWDMetricsForAllocation:(id)arg1 status:(int)arg2 hasRecipientAccepted:(char)arg3 ;
-(void)_invalidateSession:(id)arg1 ;
-(void)_removeAllAllocationsForSessionID:(id)arg1 ;
-(void)_discardAllocation:(id)arg1 ;
-(void)_handleIncomingAllocateResponse:(id)arg1 ;
-(void)_processAllocationStatusResult:(id)arg1 ;
-(id)_getStatusMessageFromStatusCode:(unsigned)arg1 ;
-(id)init;
-(void)dealloc;
-(void)handler:(id)arg1 receivedOfflineMessagePendingForTopic:(id)arg2 messageContext:(id)arg3 ;
-(void)handler:(id)arg1 didReceiveMessage:(id)arg2 forTopic:(id)arg3 fromID:(id)arg4 messageContext:(id)arg5 ;
-(void)invalidateSession:(id)arg1 ;
@end

