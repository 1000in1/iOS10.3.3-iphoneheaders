/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 12:56:29 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/Support/cloudphotod
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CloudPhotoLibrary/CPLPlatformObject.h>
#import <cloudphotod/CPLEngineStoreImplementation.h>

@protocol OS_dispatch_queue;
@class NSDate, NSObject, PQLConnection, NSURL, NSMutableSet, CPLPrequeliteVariable, NSString;

@interface CPLPrequeliteStore : CPLPlatformObject <CPLEngineStoreImplementation> {

	NSObject*<OS_dispatch_queue> _queue;
	PQLConnection* _db;
	NSURL* _dbURL;
	char _configuringDB;
	NSMutableSet* _modifiedVariables;
	CPLPrequeliteVariable* _libraryVersionVar;
	CPLPrequeliteVariable* _userIdentifierVar;
	CPLPrequeliteVariable* _libraryZoneNameVar;
	CPLPrequeliteVariable* _supportedFeatureVersionInLastSyncVar;
	CPLPrequeliteVariable* _lastQuarantineCountReportDateVar;
	CPLPrequeliteVariable* _clientCacheIdentifierVar;
	CPLPrequeliteVariable* _clientCacheIdentifierAsKnownByClient;
	CPLPrequeliteVariable* _libraryCreationDateVar;
	NSObject*<OS_dispatch_queue> _isClientInSyncWithClientCacheQueue;
	char _isClientInSyncWithClientCache;
	unsigned _resetOption;
	NSString* _resetReason;
	char _needsToReset;
	char _reentrencyGuard;
	int _upgradeEventJournal;
	NSDate* _libraryCreationDate;

}

@property (readonly) NSDate * libraryCreationDate;                  //@synthesize libraryCreationDate=_libraryCreationDate - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) id corruptionInfo; 
-(void)recordUpgradeEvent:(id)arg1 ;
-(char)addGlobalVariable:(id)arg1 defaultValue:(id)arg2 error:(id*)arg3 ;
-(id)valueForGlobalVariable:(id)arg1 ;
-(char)_openWithError:(id*)arg1 ;
-(char)_upgradeToVersion:(long long)arg1 ;
-(char)_postUpgradeToVersion:(long long)arg1 ;
-(char)_initializeDB;
-(char)_upgradeDB:(long long)arg1 ;
-(char)_setupPragmas;
-(char)_setupDBIfNeeded;
-(char)setValue:(id)arg1 forGlobalVariable:(id)arg2 error:(id*)arg3 ;
-(void)_cacheValue:(id)arg1 forVariable:(id)arg2 ;
-(void)recordUpgradeEvent:(id)arg1 arguments:(void*)arg2 ;
-(void)triggerResetAfterUpgrade:(unsigned)arg1 withReason:(id)arg2 ;
-(id)pqlConnection;
-(char)table:(id)arg1 hasRecordsMatchingQuery:(id)arg2 ;
-(unsigned)table:(id)arg1 countOfRecordsMatchingQuery:(id)arg2 ;
-(void)table:(id)arg1 enumerateCountGroupedByUnsignedIntegerProperty:(id)arg2 block:(/*^block*/id)arg3 ;
-(void)table:(id)arg1 enumerateCountGroupedByProperty:(id)arg2 block:(/*^block*/id)arg3 ;
-(id)status;
-(id)libraryVersion;
-(void)writeTransactionDidFail;
-(void)writeTransactionDidSucceed;
-(id)createNewLibraryVersion;
-(char)storeLibraryVersion:(id)arg1 withError:(id*)arg2 ;
-(id)createNewClientCacheIdentifier;
-(char)storeClientCacheIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)storeSupportedFeatureVersionInLastSync:(unsigned)arg1 error:(id*)arg2 ;
-(char)storeClientIsNotInSyncWithClientCacheWithError:(id*)arg1 ;
-(char)isClientInSyncWithClientCache;
-(char)storeUserIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)executePostOpenWithError:(id*)arg1 ;
-(unsigned)supportedFeatureVersionInLastSync;
-(void)performBarrierTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)performReadTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)performWriteTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)libraryZoneName;
-(char)storeLibraryZoneName:(id)arg1 error:(id*)arg2 ;
-(id)lastQuarantineCountReportDate;
-(char)storeLastQuarantineCountReportDate:(id)arg1 error:(id*)arg2 ;
-(id)clientCacheIdentifier;
-(char)storeClientIsInSyncWithClientCacheWithError:(id*)arg1 ;
-(NSDate *)libraryCreationDate;
-(id)corruptionInfo;
-(id)initWithAbstractObject:(id)arg1 ;
-(char)closeWithError:(id*)arg1 ;
-(char)openWithError:(id*)arg1 ;
-(id)userIdentifier;
@end

