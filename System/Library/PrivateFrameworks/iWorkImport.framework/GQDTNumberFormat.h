/*
* This header is generated by classdump-dyld 1.0
* on Sunday, December 31, 2017 at 1:10:35 AM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/GQDNameMappable.h>

@class NSArray, NSIndexSet, NSString;

@interface GQDTNumberFormat : NSObject <GQDNameMappable> {

	char* mUid;
	CFStringRef mFormatString;
	CFStringRef mCurrencyCode;
	long mDecimalPlaces;
	char mUseAccountingStyle;
	char mShowThousandsSeparator;
	int mValueType;
	int mNegativeStyle;
	int mFractionAccuracy;
	char mFormatStringRequiresSuppressionOfMinusSign;
	double mScaleFactor;
	char mIsCustom;
	char mRequiresFractionReplacement;
	unsigned char mNumberOfNonSpaceIntegerPlaceholderDigits;
	unsigned char mNumberOfNonSpaceDecimalPlaceholderDigits;
	unsigned short mIndexFromRightOfLastDigitPlaceholder;
	unsigned char mBase;
	unsigned short mBasePlaces;
	char mBaseUsesMinusSign;
	char mUseScientificFormattingAutomatically;
	char mIgnoreDecimalPlacesForZeroValue;
	char mIsTextFormat;
	char mFormatContainsSpecialTokens;
	char mFormatContainsIntegerToken;
	NSArray* mInterstitialStrings;
	NSIndexSet* mInterstitialStringInsertionIndexes;
	unsigned char mMinimumIntegerWidth;
	unsigned char mDecimalWidth;
	CFStringRef mSuffixString;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(const StateSpec*)stateForReading;
+(id)numberFormatWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(char)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(char)arg7 fractionAccuracy:(int)arg8 suffixString:(CFStringRef)arg9 ;
+(char)needToSuppressMinusSignForFormatString:(CFStringRef)arg1 ;
-(int)readAttributesFromReader:(xmlTextReaderRef)arg1 ;
-(CFStringRef)createStringFromDouble:(double)arg1 ;
-(id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(char)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(char)arg7 fractionAccuracy:(int)arg8 suffixString:(CFStringRef)arg9 scaleFactor:(double)arg10 base:(unsigned short)arg11 basePlaces:(unsigned short)arg12 baseUseMinusSign:(char)arg13 isCustom:(char)arg14 interstitialStrings:(id)arg15 interstitialStringInsertionIndexes:(id)arg16 indexFromRightOfLastDigitPlaceholder:(unsigned short)arg17 minimumIntegerWidth:(unsigned char)arg18 decimalWidth:(unsigned char)arg19 numberOfNonSpaceIntegerPlaceholderDigits:(unsigned char)arg20 numberOfNonSpaceDecimalPlaceholderDigits:(unsigned char)arg21 isTextFormat:(char)arg22 formatName:(id)arg23 ;
-(id)stringFromDouble:(double)arg1 ;
-(id)numberFormatBySettingValueType:(int)arg1 ;
-(void)dealloc;
-(id)formatString;
-(id)currencyCode;
-(int)valueType;
-(char)showThousandsSeparator;
-(int)fractionAccuracy;
-(char)hasValidDecimalPlaces;
-(char)isCustom;
-(id)customNumberFormatTokens;
-(char)isTextFormat;
-(id)numberFormatBySettingNegativeStyle:(int)arg1 ;
-(void)setUseScientificFormattingAutomatically:(char)arg1 ;
-(id)fractionStringFromDouble:(double)arg1 ;
-(id)baseStringFromDouble:(double)arg1 ;
-(char)useAccountingStyle;
@end

