/*
* This header is generated by classdump-dyld 1.0
* on Friday, December 29, 2017 at 6:36:46 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/CoreServices/SpringBoard.app/SpringBoard
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SpringBoard/SpringBoard-Structs.h>
#import <SpringBoard/SBWorkspace.h>
#import <libobjc.A.dylib/BSTransactionObserver.h>
#import <SpringBoard/SBAlertManagerDelegate.h>
#import <SpringBoard/SBAlertManagerObserver.h>
#import <SpringBoard/SBStarkScreenManagerObserver.h>
#import <SpringBoard/SBStarkScreenControllerObserver.h>
#import <SpringBoard/SBReachabilityObserver.h>
#import <SpringBoard/FBSystemServiceDelegate.h>
#import <libobjc.A.dylib/FBProcessManagerObserver.h>
#import <libobjc.A.dylib/FBApplicationProcessObserver.h>
#import <SpringBoard/BSWatchdogDelegate.h>
#import <libobjc.A.dylib/FBSceneManagerObserver.h>
#import <libobjc.A.dylib/MCProfileConnectionObserver.h>
#import <SpringBoard/BSPowerMonitorObserver.h>

@class FBSceneManager, SBMainAlertManager, BSEventQueueLock, SBScreenTimeTrackingController, SBOrientationAggdLogger, FBDisplayLayoutTransition, SBWorkspaceTransaction, BSWatchdog, NSTimer, NSMutableArray, SBWindow, SBWindowSelfHostWrapper, NSMutableDictionary, NSMutableSet, SBAppStatusBarSettingsAssertion, NSSet, SBAlertManager, NSString;

@interface SBMainWorkspace : SBWorkspace <BSTransactionObserver, SBAlertManagerDelegate, SBAlertManagerObserver, SBStarkScreenManagerObserver, SBStarkScreenControllerObserver, SBReachabilityObserver, FBSystemServiceDelegate, FBProcessManagerObserver, FBApplicationProcessObserver, BSWatchdogDelegate, FBSceneManagerObserver, MCProfileConnectionObserver, BSPowerMonitorObserver> {

	char _initialized;
	FBSceneManager* _sceneManager;
	SBMainAlertManager* _alertManager;
	BSEventQueueLock* _suspensionLock;
	char _alertManagerIsDeactivatingAlert;
	char _alertManagerIsActivatingLockAlert;
	char _medusaEnabled;
	SBScreenTimeTrackingController* _screenTimeTrackingController;
	SBOrientationAggdLogger* _orientationAggdLogger;
	FBDisplayLayoutTransition* _displayLayoutTransition;
	SBWorkspaceTransaction* _currentTransaction;
	BSEventQueueLock* _currentTransactionLock;
	BSWatchdog* _transactionWatchdog;
	NSTimer* _relaunchTimer;
	NSMutableArray* _applicationsToRelaunch;
	SBWindow* _reachabilityWindow;
	SBWindowSelfHostWrapper* _reachabilityHostWrapper;
	SBWindow* _reachabilityEffectWindow;
	NSMutableDictionary* _extensionHandlersByType;
	NSMutableSet* _foregroundAppPidsWhenDisplaySecureModeWasEnabled;
	SBAppStatusBarSettingsAssertion* _statusBarAssertion;
	NSMutableDictionary* _appActivationFlagsForSceneUpdates;
	NSMutableSet* _activeSuspendedWorkspaceTransitions;

}

@property (nonatomic,retain) SBWorkspaceTransaction * currentTransaction;                             //@synthesize currentTransaction=_currentTransaction - In the implementation block
@property (nonatomic,readonly) FBSceneManager * sceneManager;                                         //@synthesize sceneManager=_sceneManager - In the implementation block
@property (nonatomic,readonly) char alertManagerIsActivatingLockAlert;                                //@synthesize alertManagerIsActivatingLockAlert=_alertManagerIsActivatingLockAlert - In the implementation block
@property (nonatomic,readonly) NSSet * foregroundAppPidsWhenDisplaySecureModeWasEnabled;              //@synthesize foregroundAppPidsWhenDisplaySecureModeWasEnabled=_foregroundAppPidsWhenDisplaySecureModeWasEnabled - In the implementation block
@property (getter=isMedusaEnabled,nonatomic,readonly) char medusaEnabled;                             //@synthesize medusaEnabled=_medusaEnabled - In the implementation block
@property (nonatomic,readonly) SBAlertManager * alertManager;                                         //@synthesize alertManager=_alertManager - In the implementation block
@property (getter=isSpringBoardActive,nonatomic,readonly) char springBoardActive; 
@property (nonatomic,readonly) double autoDimTime; 
@property (nonatomic,readonly) double autoLockTime; 
@property (nonatomic,readonly) char wantsIdleTimerDisabled; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)_instanceIfExists;
+(id)_sharedInstanceWithNilCheckPolicy:(int)arg1 ;
+(id)sharedInstance;
+(id)debugDescription;
+(void)start;
-(void)handleReachabilityModeActivated;
-(void)handleReachabilityModeDeactivated;
-(id)createRequestForApplicationActivation:(id)arg1 options:(unsigned)arg2 ;
-(char)executeTransitionRequest:(id)arg1 ;
-(id)layoutController;
-(id)createRequestWithOptions:(unsigned)arg1 ;
-(char)executeTransitionRequest:(id)arg1 withValidator:(/*^block*/id)arg2 ;
-(char)requestTransitionWithOptions:(unsigned)arg1 builder:(/*^block*/id)arg2 validator:(/*^block*/id)arg3 ;
-(char)requestTransitionWithBuilder:(/*^block*/id)arg1 ;
-(SBAlertManager *)alertManager;
-(id)_applicationForIdentifier:(id)arg1 ;
-(id)_workspaceApplicationForApplication:(id)arg1 ;
-(id)_selectTransactionForAppActivationRequest:(id)arg1 ;
-(char)alertManagerIsActivatingLockAlert;
-(double)autoDimTime;
-(double)autoLockTime;
-(void)_updateFrontMostApplicationEventPort;
-(int)_statusBarStyleOverridesToCancel;
-(int)_statusBarStyleOverridesToCancelWithoutConsideringAlerts;
-(void)_registerHandler:(id)arg1 forExtensionPoint:(id)arg2 ;
-(void)_unregisterHandler:(id)arg1 forExtensionPoint:(id)arg2 ;
-(NSSet *)foregroundAppPidsWhenDisplaySecureModeWasEnabled;
-(id)initWithDisplay:(id)arg1 eventQueue:(id)arg2 ;
-(char)_executeTransitionRequest:(id)arg1 options:(unsigned)arg2 validator:(/*^block*/id)arg3 ;
-(id)transactionForTransitionRequest:(id)arg1 ;
-(void)_updateMedusaEnablementAndNotify:(char)arg1 ;
-(void)_memoryPressureRelieved:(id)arg1 ;
-(void)_memoryPressureWarn:(id)arg1 ;
-(void)_deviceWillEnableDisplaySecureMode:(id)arg1 ;
-(void)_deviceWillDisableDisplaySecureMode:(id)arg1 ;
-(void)_initializeAndObserveDefaults;
-(void)_addStateCaptureHandlers;
-(id)_selectTransactionForAlertActivationRequest:(id)arg1 ;
-(id)_selectTransactionForAppActivationRequest:(id)arg1 canDeactivateAlerts:(char)arg2 ;
-(id)_transactionForTransitionRequest:(id)arg1 canDeactivateAlerts:(char)arg2 ;
-(char)_preflightTransitionRequest:(id)arg1 ;
-(void)_determineSourceForTransitionRequest:(id)arg1 ;
-(char)_executeAlertTransitionRequest:(id)arg1 ;
-(char)_executeApplicationTransitionRequest:(id)arg1 ;
-(void)_disableReachabilityImmediately:(char)arg1 ;
-(char)_setCurrentTransactionForRequest:(id)arg1 fallbackProvider:(/*^block*/id)arg2 ;
-(id)_workspaceApplicationForBundleIdentifier:(id)arg1 ;
-(id)_selectTransactionForReturningToTheLockScreenFromApp:(id)arg1 forceToBuddy:(char)arg2 withResult:(/*^block*/id)arg3 ;
-(id)_selectTransactionForReturningToTheLockScreenWithRequest:(id)arg1 fromApp:(id)arg2 ;
-(id)_selectTransactionForAppActivationUnderMainScreenLockRequest:(id)arg1 ;
-(id)_selectTransactionForAppActivationUnderMainScreenLock:(id)arg1 withResult:(/*^block*/id)arg2 ;
-(char)isMedusaEnabled;
-(void)starkScreenManagerDidChangeCurrentController:(id)arg1 ;
-(void)_launchNextPendedAutoLaunchApp;
-(void)_invalidateRelaunchTimer;
-(void)_scheduleRelaunchTimerIfNecessary;
-(char)_handleSetupExited:(id)arg1 ;
-(void)_noteSceneUpdateDidActivateApp:(char)arg1 withSceneIdentifier:(id)arg2 ;
-(void)_handleBuddyLaunchFinished;
-(char)_applicationProcessExited:(id)arg1 withContext:(id)arg2 ;
-(id)_selectTransactionForAppExited:(id)arg1 ;
-(id)_selectTransactionForAppRelaunch:(id)arg1 ;
-(void)_handleOpenApplicationRequest:(id)arg1 options:(id)arg2 origin:(id)arg3 withResult:(/*^block*/id)arg4 ;
-(id)_validateRequestToOpenApplication:(id)arg1 options:(id)arg2 origin:(id)arg3 error:(out id*)arg4 ;
-(char)_canImplicitlyUnlockAtLockScreenWhileAuthenticatedFromOrigin:(id)arg1 givenOrigin:(id)arg2 trustedRequest:(char)arg3 outReason:(id*)arg4 ;
-(void)_attemptUnlockToApplication:(id)arg1 showPasscode:(char)arg2 origin:(id)arg3 completion:(/*^block*/id)arg4 ;
-(id)_handlerForExtensionPoint:(id)arg1 ;
-(id)_commonActivationSettingsForRequestWithOptions:(id)arg1 isTrustedRequest:(char)arg2 clientProcess:(id)arg3 ;
-(char)_isApplicationRunningAsViewService:(id)arg1 ;
-(void)alertManager:(id)arg1 topAlert:(id)arg2 requestsWallpaperStyleChangeWithAnimationFactory:(id)arg3 ;
-(void)starkScreenController:(id)arg1 didChangeStateFromState:(int)arg2 toState:(int)arg3 ;
-(void)_exitReachabilityModeWithCompletion:(/*^block*/id)arg1 ;
-(void)handleCancelReachabilityRecognizer:(id)arg1 ;
-(void)handleRevealNotificationCenterGesture:(id)arg1 ;
-(void)_noteDidWakeFromSleep;
-(CGRect)sceneFrameForAlerts:(id)arg1 ;
-(float)sceneLevelForAlerts;
-(char)alertManager:(id)arg1 shouldDeactivateDismissedAlert:(id)arg2 ;
-(id)alertManager:(id)arg1 newAlertWindowForScene:(id)arg2 ;
-(char)alertManager:(id)arg1 defaultShouldAutorotateForAlert:(id)arg2 ;
-(int)alertManager:(id)arg1 defaultInterfaceOrientationForPresentationOfAlert:(id)arg2 ;
-(unsigned)alertManager:(id)arg1 defaultSupportedInterfaceOrientationsForAlert:(id)arg2 ;
-(void)alertManager:(id)arg1 willActivateAlert:(id)arg2 overAlerts:(id)arg3 ;
-(void)alertManager:(id)arg1 didActivateAlert:(id)arg2 overAlerts:(id)arg3 ;
-(void)alertManager:(id)arg1 willDeactivateAlert:(id)arg2 top:(char)arg3 ;
-(void)alertManager:(id)arg1 didDeactivateAlert:(id)arg2 top:(char)arg3 ;
-(void)alertManager:(id)arg1 didChangeTopAlertFromAlert:(id)arg2 toAlert:(id)arg3 ;
-(void)alertManager:(id)arg1 topAlertDidChangeOrientationEventsEnabled:(id)arg2 ;
-(void)alertManager:(id)arg1 willTearDownAlertWindow:(id)arg2 ;
-(void)alertManager:(id)arg1 didTearDownAlertWindow:(id)arg2 ;
-(void)alertManager:(id)arg1 didRemoveAlert:(id)arg2 fromWindow:(id)arg3 ;
-(void)starkScreenManagerWillChangeCurrentController:(id)arg1 ;
-(id)transactionForTransitionRequestDeactivatingAlerts:(id)arg1 ;
-(char)isSpringBoardActive;
-(char)wantsIdleTimerDisabled;
-(id)_selectTransactionForReturningToTheLockScreenWithResult:(/*^block*/id)arg1 ;
-(void)_medusaPrefMayHaveChanged;
-(void)updateInterruptedByCallSettingsFrom:(id)arg1 to:(id)arg2 ;
-(void)_handleOpenURLRequest:(id)arg1 application:(id)arg2 options:(id)arg3 activationSettings:(id)arg4 origin:(id)arg5 withResult:(/*^block*/id)arg6 ;
-(void)watchdogStarted:(id)arg1 ;
-(void)watchdogFired:(id)arg1 ;
-(void)powerMonitorSystemSleepRequestAborted:(id)arg1 ;
-(void)powerMonitorSystemWillSleep:(id)arg1 ;
-(void)powerMonitorSystemWillWakeFromSleep:(id)arg1 ;
-(void)powerMonitorSystemDidWakeFromSleep:(id)arg1 ;
-(id)init;
-(void)dealloc;
-(NSString *)debugDescription;
-(void)_finishInitialization;
-(void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2 ;
-(FBSceneManager *)sceneManager;
-(void)_suspend;
-(void)transactionDidComplete:(id)arg1 ;
-(void)sceneManager:(id)arg1 didCreateScene:(id)arg2 withClient:(id)arg3 ;
-(void)sceneManager:(id)arg1 willUpdateScene:(id)arg2 withSettings:(id)arg3 transitionContext:(id)arg4 ;
-(void)sceneManager:(id)arg1 willCommitUpdateForScene:(id)arg2 transactionID:(unsigned)arg3 ;
-(void)sceneManager:(id)arg1 didCommitUpdateForScene:(id)arg2 transactionID:(unsigned)arg3 success:(char)arg4 ;
-(void)systemServicePrepareForShutdown:(id)arg1 withOptions:(unsigned)arg2 ;
-(void)systemService:(id)arg1 dataReset:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)systemServicePrepareForExit:(id)arg1 andRelaunch:(char)arg2 ;
-(void)systemService:(id)arg1 canActivateApplication:(id)arg2 withResult:(/*^block*/id)arg3 ;
-(void)systemService:(id)arg1 handleOpenApplicationRequest:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)systemService:(id)arg1 isPasscodeLockedOrBlockedWithResult:(/*^block*/id)arg2 ;
-(void)systemService:(id)arg1 handleActions:(id)arg2 origin:(id)arg3 withResult:(/*^block*/id)arg4 ;
-(void)process:(id)arg1 stateDidChangeFromState:(id)arg2 toState:(id)arg3 ;
-(void)processDidExit:(id)arg1 ;
-(void)applicationProcessDidExit:(id)arg1 withContext:(id)arg2 ;
-(void)applicationProcessWillLaunch:(id)arg1 ;
-(void)applicationProcessDidLaunch:(id)arg1 ;
-(void)applicationProcessDebuggingStateDidChange:(id)arg1 ;
-(void)processManager:(id)arg1 didAddProcess:(id)arg2 ;
-(void)processManager:(id)arg1 didRemoveProcess:(id)arg2 ;
-(void)_resume;
-(SBWorkspaceTransaction *)currentTransaction;
-(void)setCurrentTransaction:(SBWorkspaceTransaction *)arg1 ;
@end

