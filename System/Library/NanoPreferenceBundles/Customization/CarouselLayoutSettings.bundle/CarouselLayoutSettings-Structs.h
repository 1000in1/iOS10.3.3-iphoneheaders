/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 6:38:32 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/NanoPreferenceBundles/Customization/CarouselLayoutSettings.bundle/CarouselLayoutSettings
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct {
	float field1;
} SCD_Struct_CS1;

typedef struct Hex {
	int q;
	int r;
} Hex;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_CS5;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > >;

typedef struct unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > {
	hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > __table_;
} unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > >;

typedef struct unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int> > > {
	hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > > __table_;
} unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CSLPressState> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<CSLPressState> >;

typedef struct _compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> > {
	/*function pointer*/void* __first_;
} compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> >;

typedef struct _split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> > {
	/*function pointer*/void* __first_;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> > __end_cap_;
} split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> >;

typedef struct deque<CSLPressState, std::__1::allocator<CSLPressState> > {
	split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<CSLPressState> > __size_;
} deque<CSLPressState, std::__1::allocator<CSLPressState> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<CSL::Hex> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::hash<CSL::Hex> >;

typedef struct _compressed_pair<float, std::__1::equal_to<CSL::Hex> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<CSL::Hex> >;

typedef struct _hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> {
	__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > > {
	hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > __second_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > >;

typedef struct _hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<CSL::Hex> > __p2_;
	compressed_pair<float, std::__1::equal_to<CSL::Hex> > __p3_;
} hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> >;

typedef struct unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > {
	hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > __table_;
} unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> >;

typedef struct {
	double field1;
	Hex field2;
	char field3;
	double field4;
	char field5;
	o field6;
	m field7;
	p field8;
	const  field9;
	e field10;
	short field11;
	short field12;
	e field13;
	double field14;
	_ field15;
	p field16;
	a field17;
	int field18;
	const  field19;
	< field20;
	float field21;
	long field22;
	o field23;
	a field24;
	t field25;
	, field26;
	  field27;
	short field28;
	t field29;
	double field30;
	SEL field31;
	SEL field32;
	_ field33;
	_ field34;
	1 field35;
	SEL field36;
	SEL field37;
	_ field38;
	_ field39;
	u field40;
	n field41;
	o field42;
	const  field43;
	double field44;
	e field45;
	const  field46;
	e field47;
	double field48;
	_ field49;
	m field50;
	a field51;
	p field52;
	_ field53;
	e field54;
	long long field55;
	u field56;
	a field57;
	long field58;
	< field59;
	unsigned char field60;
	unsigned short field61;
	unsigned long field62;
	SEL field63;
	SEL field64;
	Hex field65;
	, field66;
	  field67;
	short field68;
	t field69;
	double field70;
	SEL field71;
	SEL field72;
	_ field73;
	_ field74;
	1 field75;
	SEL field76;
	SEL field77;
	_ field78;
	_ field79;
	h field80;
	a field81;
	short field82;
	h field83;
	_ field84;
	void field85;
	a field86;
	long field87;
	u field88;
	e field89;
	_ field90;
	t field91;
	y field92;
	p field93;
	e field94;
	< field95;
	unsigned char field96;
	unsigned short field97;
	unsigned long field98;
	SEL field99;
	SEL field100;
	Hex field101;
	, field102;
	  field103;
	unsigned char field104;
	unsigned short field105;
	unsigned long field106;
	Hex field107;
	A field108;
	p field109;
	p field110;
	N field111;
	o field112;
	double field113;
	e field114;
	  field115;
	char* field116;
	_ field117;
	_ field118;
	u field119;
	n field120;
	short field121;
	a field122;
	float field123;
	e field124;
	_ field125;
	u field126;
	n field127;
	const  field128;
	e field129;
	t field130;
	a field131;
	int field132;
	n field133;
	e field134;
	double field135;
	> field136;
	, field137;
	  field138;
	short field139;
	t field140;
	double field141;
	SEL field142;
	SEL field143;
	_ field144;
	_ field145;
	1 field146;
	SEL field147;
	SEL field148;
	e field149;
	long long field150;
	u field151;
	a field152;
	long field153;
	_ field154;
	t field155;
	o field156;
	< field157;
	unsigned char field158;
	unsigned short field159;
	unsigned long field160;
	SEL field161;
	SEL field162;
	Hex field163;
	> field164;
	, field165;
	  field166;
	t field167;
	const  field168;
	u field169;
	e field170;
	> field171;
	  field172;
	> field173;
} SCD_Struct_CS40;

