/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 6:38:32 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/NanoPreferenceBundles/Customization/CarouselLayoutSettings.bundle/CarouselLayoutSettings
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol CSLPressStateApplierDelegate;
#import <CarouselLayoutSettings/CarouselLayoutSettings-Structs.h>
@class CASpringAnimation, CADisplayLink;

@interface CSLPressStateApplier : NSObject {

	CASpringAnimation* _spring;
	double _springDuration;
	double _updateTime;
	CADisplayLink* _displayLink;
	deque<CSLPressState, std::__1::allocator<CSLPressState> >* _pressStates;
	unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> >* _pressedHexes;
	id<CSLPressStateApplierDelegate> _delegate;

}

@property (assign,nonatomic,__weak) id<CSLPressStateApplierDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (getter=isEnabled,nonatomic,readonly) char enabled; 
-(void)cleanupAfterLayout;
-(char)isEnabledForHex:(Hex)arg1 ;
-(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)layoutAttributesForHex:(Hex)arg1 ;
-(void)setPressedHex:(Hex)arg1 ;
-(char)_needsDisplayLink;
-(void)_reversePressStatesAtTime:(double)arg1 ;
-(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)_computeTargetAttributesForHex:(Hex)arg1 sourceAttributes:(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)arg2 forPressState:(SCD_Struct_CS40)arg3 ;
-(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)_interpolateBetweenSourceAttributes:(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)arg1 targetAttributes:(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)arg2 pressState:(SCD_Struct_CS40)arg3 ;
-(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)_interpolateBetweenSourceAttributes:(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)arg1 targetAttributes:(compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >)arg2 fraction:(double)arg3 ;
-(void)clearPressedHex;
-(void)prepareForLayout;
-(id)init;
-(void)setDelegate:(id<CSLPressStateApplierDelegate>)arg1 ;
-(id<CSLPressStateApplierDelegate>)delegate;
-(char)isEnabled;
-(void)_displayLinkFired:(id)arg1 ;
-(void)_updateDisplayLink;
@end

