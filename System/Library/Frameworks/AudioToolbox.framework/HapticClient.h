/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 11:20:54 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioToolbox/AudioToolbox-Structs.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>

@protocol ServerInterface;
@class NSXPCConnection, NSArray, NSString;

@interface HapticClient : NSObject <NSXPCListenerDelegate> {

	NSXPCConnection* _connection;
	unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller> >* _syncCaller;
	HapticSharedMemory* _sharedBuffer;
	unsigned _uniqueID;
	char _prewarmed;
	char _running;
	char _connected;
	id<ServerInterface> _serverDelegate;
	unsigned _clientID;
	NSArray* _channelKeys;
	int _serverProcessID;

}

@property (retain) id<ServerInterface> serverDelegate;              //@synthesize serverDelegate=_serverDelegate - In the implementation block
@property (assign) char connected;                                  //@synthesize connected=_connected - In the implementation block
@property (readonly) unsigned clientID;                             //@synthesize clientID=_clientID - In the implementation block
@property (readonly) NSArray * channelKeys;                         //@synthesize channelKeys=_channelKeys - In the implementation block
@property (readonly) char prewarmed;                                //@synthesize prewarmed=_prewarmed - In the implementation block
@property (readonly) char running;                                  //@synthesize running=_running - In the implementation block
@property (assign) int serverProcessID;                             //@synthesize serverProcessID=_serverProcessID - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(char)loadHapticSequence:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)prewarm:(/*^block*/id)arg1 ;
-(void)startRunning:(/*^block*/id)arg1 ;
-(void)handleConnectionError;
-(char)setChannelEventBehavior:(unsigned)arg1 channel:(unsigned)arg2 ;
-(char)startEventAndReturnToken:(unsigned)arg1 type:(unsigned)arg2 atTime:(double)arg3 channel:(unsigned)arg4 eventToken:(unsigned*)arg5 ;
-(char)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned)arg3 error:(id*)arg4 ;
-(char)stopEventWithToken:(unsigned)arg1 atTime:(double)arg2 channel:(unsigned)arg3 ;
-(char)clearEventsFromTime:(double)arg1 channel:(unsigned)arg2 ;
-(char)setParameter:(unsigned)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned)arg4 ;
-(NSArray *)channelKeys;
-(void)allocateResources:(/*^block*/id)arg1 ;
-(char)loadHapticPreset:(id)arg1 error:(id*)arg2 ;
-(char)prepareHapticSequence:(unsigned)arg1 error:(id*)arg2 ;
-(char)enableSequenceLooping:(unsigned)arg1 enable:(char)arg2 error:(id*)arg3 ;
-(char)startHapticSequence:(unsigned)arg1 atTime:(double)arg2 withOffset:(double)arg3 ;
-(char)stopHapticSequence:(unsigned)arg1 atTime:(double)arg2 ;
-(char)detachHapticSequence:(unsigned)arg1 atTime:(double)arg2 ;
-(void)doInit;
-(char)setupConnectionAndReturnError:(id*)arg1 ;
-(void)destroySharedMemory;
-(id<ServerInterface>)serverDelegate;
-(long)setupSharedMemory:(id)arg1 size:(unsigned)arg2 ;
-(int)serverProcessID;
-(void)handleHapticServerCrash;
-(void)setServerDelegate:(id<ServerInterface>)arg1 ;
-(void)setServerProcessID:(int)arg1 ;
-(void)setChannelKeys:(NSArray *)arg1 ;
-(char)prewarmed;
-(void)releaseResources;
-(void)dealloc;
-(id)initAndReturnError:(id*)arg1 ;
-(char)setNumberOfChannels:(unsigned)arg1 error:(id*)arg2 ;
-(void)stopRunning;
-(void)stopPrewarm;
-(void)disconnect;
-(unsigned)clientID;
-(void)setConnected:(char)arg1 ;
-(char)connected;
-(char)finish:(/*^block*/id)arg1 ;
-(char)running;
@end

