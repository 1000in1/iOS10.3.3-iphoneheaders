/*
* This header is generated by classdump-dyld 1.0
* on Friday, December 29, 2017 at 6:29:24 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_xpc_object>, AUAudioUnit;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::bitset<255> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::bitset<255> >, void *> > >;

typedef struct _tree<std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::bitset<255> > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::bitset<255> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true> > __pair3_;
} tree<std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::bitset<255> > > >;

typedef struct map<int, std::__1::bitset<255>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::bitset<255> > > > {
	tree<std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::bitset<255> >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::bitset<255> > > > __tree_;
} map<int, std::__1::bitset<255>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::bitset<255> > > >;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct SSPlayerSynchronizer* SSPlayerSynchronizerRef;

typedef struct OpaqueAUPBServer* OpaqueAUPBServerRef;

typedef struct _compressed_pair<NSObject<OS_dispatch_semaphore> **, std::__1::allocator<NSObject<OS_dispatch_semaphore> *> > {
	id __first_;
} compressed_pair<NSObject<OS_dispatch_semaphore> **, std::__1::allocator<NSObject<OS_dispatch_semaphore> *> >;

typedef struct vector<NSObject<OS_dispatch_semaphore> *, std::__1::allocator<NSObject<OS_dispatch_semaphore> *> > {
	id __begin_;
	id __end_;
	compressed_pair<NSObject<OS_dispatch_semaphore> **, std::__1::allocator<NSObject<OS_dispatch_semaphore> *> > __end_cap_;
} vector<NSObject<OS_dispatch_semaphore> *, std::__1::allocator<NSObject<OS_dispatch_semaphore> *> >;

typedef struct _compressed_pair<PropertyListener *, std::__1::allocator<PropertyListener> > {
	PropertyListener __first_;
} compressed_pair<PropertyListener *, std::__1::allocator<PropertyListener> >;

typedef struct vector<PropertyListener, std::__1::allocator<PropertyListener> > {
	PropertyListener __begin_;
	PropertyListener __end_;
	compressed_pair<PropertyListener *, std::__1::allocator<PropertyListener> > __end_cap_;
} vector<PropertyListener, std::__1::allocator<PropertyListener> >;

typedef struct _compressed_pair<NewServerListener *, std::__1::allocator<NewServerListener> > {
	NewServerListener __first_;
} compressed_pair<NewServerListener *, std::__1::allocator<NewServerListener> >;

typedef struct vector<NewServerListener, std::__1::allocator<NewServerListener> > {
	NewServerListener __begin_;
	NewServerListener __end_;
	compressed_pair<NewServerListener *, std::__1::allocator<NewServerListener> > __end_cap_;
} vector<NewServerListener, std::__1::allocator<NewServerListener> >;

typedef struct _NSZone* NSZoneRef;

typedef struct OpaqueAUPB* OpaqueAUPBRef;

typedef struct OpaqueRemoteAudioUnit* OpaqueRemoteAudioUnitRef;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct _compressed_pair<AUProcAndUserData *, std::__1::default_delete<AUProcAndUserData> > {
	AUProcAndUserData __first_;
} compressed_pair<AUProcAndUserData *, std::__1::default_delete<AUProcAndUserData> >;

typedef struct unique_ptr<AUProcAndUserData, std::__1::default_delete<AUProcAndUserData> > {
	compressed_pair<AUProcAndUserData *, std::__1::default_delete<AUProcAndUserData> > __ptr_;
} unique_ptr<AUProcAndUserData, std::__1::default_delete<AUProcAndUserData> >;

typedef struct _compressed_pair<AUSyncCaller *, std::__1::default_delete<AUSyncCaller> > {
	AUSyncCaller __first_;
} compressed_pair<AUSyncCaller *, std::__1::default_delete<AUSyncCaller> >;

typedef struct unique_ptr<AUSyncCaller, std::__1::default_delete<AUSyncCaller> > {
	compressed_pair<AUSyncCaller *, std::__1::default_delete<AUSyncCaller> > __ptr_;
} unique_ptr<AUSyncCaller, std::__1::default_delete<AUSyncCaller> >;

typedef struct opaque_pthread_mutex_t {
	long __sig;
	char __opaque[40];
} opaque_pthread_mutex_t;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct _compressed_pair<AUAudioUnit_XH_PropListener *, std::__1::allocator<AUAudioUnit_XH_PropListener> > {
	AUAudioUnit_XH_PropListener __first_;
} compressed_pair<AUAudioUnit_XH_PropListener *, std::__1::allocator<AUAudioUnit_XH_PropListener> >;

typedef struct vector<AUAudioUnit_XH_PropListener, std::__1::allocator<AUAudioUnit_XH_PropListener> > {
	AUAudioUnit_XH_PropListener __begin_;
	AUAudioUnit_XH_PropListener __end_;
	compressed_pair<AUAudioUnit_XH_PropListener *, std::__1::allocator<AUAudioUnit_XH_PropListener> > __end_cap_;
} vector<AUAudioUnit_XH_PropListener, std::__1::allocator<AUAudioUnit_XH_PropListener> >;

typedef struct HostCallbackInfo {
	void hostUserData;
	/*function pointer*/void* beatAndTempoProc;
	/*function pointer*/void* musicalTimeLocationProc;
	/*function pointer*/void* transportStateProc;
	/*function pointer*/void* transportStateProc2;
} HostCallbackInfo;

typedef struct CAMutex {
	/*function pointer*/void* _vptr$CAMutex;
	char* mName;
	_opaque_pthread_t mOwner;
	opaque_pthread_mutex_t mMutex;
} CAMutex;

typedef struct _compressed_pair<SemaphoreIOMessenger_Sender *, std::__1::default_delete<SemaphoreIOMessenger_Sender> > {
	SemaphoreIOMessenger_Sender __first_;
} compressed_pair<SemaphoreIOMessenger_Sender *, std::__1::default_delete<SemaphoreIOMessenger_Sender> >;

typedef struct unique_ptr<SemaphoreIOMessenger_Sender, std::__1::default_delete<SemaphoreIOMessenger_Sender> > {
	compressed_pair<SemaphoreIOMessenger_Sender *, std::__1::default_delete<SemaphoreIOMessenger_Sender> > __ptr_;
} unique_ptr<SemaphoreIOMessenger_Sender, std::__1::default_delete<SemaphoreIOMessenger_Sender> >;

typedef struct _compressed_pair<IPCAUSharedMemoryBase::Element *, std::__1::allocator<IPCAUSharedMemoryBase::Element> > {
	Element __first_;
} compressed_pair<IPCAUSharedMemoryBase::Element *, std::__1::allocator<IPCAUSharedMemoryBase::Element> >;

typedef struct vector<IPCAUSharedMemoryBase::Element, std::__1::allocator<IPCAUSharedMemoryBase::Element> > {
	Element __begin_;
	Element __end_;
	compressed_pair<IPCAUSharedMemoryBase::Element *, std::__1::allocator<IPCAUSharedMemoryBase::Element> > __end_cap_;
} vector<IPCAUSharedMemoryBase::Element, std::__1::allocator<IPCAUSharedMemoryBase::Element> >;

typedef struct IPCAUSharedMemory {
	/*function pointer*/void* _vptr$SharableMemoryBase;
	BOOL mIsOwner;
	BOOL mWasMapped;
	unsigned mSize;
	void mBuffer;
	unsigned mPort;
	int mFileDesc;
	int mSerial;
	NSObject<OS_xpc_object>* mXPCObject;
	unsigned mHeaderSize;
	vector<IPCAUSharedMemoryBase::Element, std::__1::allocator<IPCAUSharedMemoryBase::Element> > mElements;
	unsigned mMaxFrames;
	BOOL mInitializing;
} IPCAUSharedMemory;

typedef struct IPCAURenderingClient {
	/*function pointer*/void* _vptr$IPCAURenderingClient;
	BOOL mInitialized;
	BOOL mRenderPrioritySet;
	BOOL mIsOffline;
	IPCAUSharedMemory mSharedMemory;
	unique_ptr<SemaphoreIOMessenger_Sender, std::__1::default_delete<SemaphoreIOMessenger_Sender> > mMessenger;
	double mOutputSampleRate;
	CAMutex mMessageBufferLock;
	CAMutex mConnectionLock;
	HostCallbackInfo mHostCallbackInfo;
	/*^block*/id mMusicalContextBlock;
	/*^block*/id mTransportStateBlock;
	/*^block*/id mPullInputBlock;
	int mNumInputs;
	int mNumOutputs;
	unsigned mMaximumFramesToProcess;
	double mLastRenderSampleTime;
} IPCAURenderingClient;

typedef struct _compressed_pair<ClientSyncCaller *, std::__1::default_delete<ClientSyncCaller> > {
	ClientSyncCaller __first_;
} compressed_pair<ClientSyncCaller *, std::__1::default_delete<ClientSyncCaller> >;

typedef struct unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller> > {
	compressed_pair<ClientSyncCaller *, std::__1::default_delete<ClientSyncCaller> > __ptr_;
} unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller> >;

typedef struct HapticSharedMemory {
	/*function pointer*/void* _vptr$SharableMemoryBase;
	BOOL mIsOwner;
	BOOL mWasMapped;
	unsigned mSize;
	void mBuffer;
	unsigned mPort;
	int mFileDesc;
	int mSerial;
	NSObject<OS_xpc_object>* mXPCObject;
} HapticSharedMemory;

typedef struct OpaqueAudioComponent* OpaqueAudioComponentRef;

typedef struct AudioComponentDescription {
	unsigned componentType;
	unsigned componentSubType;
	unsigned componentManufacturer;
	unsigned componentFlags;
	unsigned componentFlagsMask;
} AudioComponentDescription;

typedef struct TAtomicStack<AURenderEventStruct> {
	AURenderEventStruct mHead;
} TAtomicStack<AURenderEventStruct>;

typedef struct AUEventSchedule {
	AURenderEventAllocator mAllocator;
	TAtomicStack<AURenderEventStruct> mAddedEventStack;
	(AURenderEvent) mScheduleHead;
	AUAudioUnit* mOwningAU;
} AUEventSchedule;

typedef struct NodeStack {
	Node mHead;
} NodeStack;

typedef struct TThreadSafeList<RenderObserver> {
	NodeStack mActiveList;
	NodeStack mPendingList;
	NodeStack mFreeList;
} TThreadSafeList<RenderObserver>;

typedef struct RenderObserverList {
	TThreadSafeList<RenderObserver> mObservers;
	BOOL mTouched;
} RenderObserverList;

typedef struct RealtimeState {
	CAMutex mMutex;
	RenderObserverList renderObserverList;
	AUEventSchedule eventSchedule;
} RealtimeState;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_AU45;

typedef struct _compressed_pair<BusPropertyObserver *, std::__1::allocator<BusPropertyObserver> > {
	BusPropertyObserver __first_;
} compressed_pair<BusPropertyObserver *, std::__1::allocator<BusPropertyObserver> >;

typedef struct vector<BusPropertyObserver, std::__1::allocator<BusPropertyObserver> > {
	BusPropertyObserver __begin_;
	BusPropertyObserver __end_;
	compressed_pair<BusPropertyObserver *, std::__1::allocator<BusPropertyObserver> > __end_cap_;
} vector<BusPropertyObserver, std::__1::allocator<BusPropertyObserver> >;

typedef struct _compressed_pair<CAMutex *, std::__1::default_delete<CAMutex> > {
	CAMutex __first_;
} compressed_pair<CAMutex *, std::__1::default_delete<CAMutex> >;

typedef struct unique_ptr<CAMutex, std::__1::default_delete<CAMutex> > {
	compressed_pair<CAMutex *, std::__1::default_delete<CAMutex> > __ptr_;
} unique_ptr<CAMutex, std::__1::default_delete<CAMutex> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, RemoteAUHandleInfo> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, RemoteAUHandleInfo> > >;

typedef struct map<unsigned int, RemoteAUHandleInfo, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, RemoteAUHandleInfo> > > {
	tree<std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, RemoteAUHandleInfo>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, RemoteAUHandleInfo> > > __tree_;
} map<unsigned int, RemoteAUHandleInfo, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, RemoteAUHandleInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, AUProcessingBlock>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, AUProcessingBlock>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, AUProcessingBlock> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, AUProcessingBlock>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, AUProcessingBlock> > >;

typedef struct map<unsigned int, AUProcessingBlock, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, AUProcessingBlock> > > {
	tree<std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, AUProcessingBlock>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, AUProcessingBlock> > > __tree_;
} map<unsigned int, AUProcessingBlock, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, AUProcessingBlock> > >;

typedef struct _compressed_pair<TestAUProcessingBlock *, std::__1::default_delete<TestAUProcessingBlock> > {
	TestAUProcessingBlock __first_;
} compressed_pair<TestAUProcessingBlock *, std::__1::default_delete<TestAUProcessingBlock> >;

typedef struct unique_ptr<TestAUProcessingBlock, std::__1::default_delete<TestAUProcessingBlock> > {
	compressed_pair<TestAUProcessingBlock *, std::__1::default_delete<TestAUProcessingBlock> > __ptr_;
} unique_ptr<TestAUProcessingBlock, std::__1::default_delete<TestAUProcessingBlock> >;

typedef struct AURemoteParameterObserver* AURemoteParameterObserverRef;

typedef struct _compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> > {
	AddressToParameter __first_;
} compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> >;

typedef struct vector<AddressToParameter, std::__1::allocator<AddressToParameter> > {
	AddressToParameter __begin_;
	AddressToParameter __end_;
	compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> > __end_cap_;
} vector<AddressToParameter, std::__1::allocator<AddressToParameter> >;

typedef struct AUListenerBase* AUListenerBaseRef;

typedef struct _compressed_pair<AUAudioUnitV2Bridge_Renderer *, std::__1::default_delete<AUAudioUnitV2Bridge_Renderer> > {
	AUAudioUnitV2Bridge_Renderer __first_;
} compressed_pair<AUAudioUnitV2Bridge_Renderer *, std::__1::default_delete<AUAudioUnitV2Bridge_Renderer> >;

typedef struct unique_ptr<AUAudioUnitV2Bridge_Renderer, std::__1::default_delete<AUAudioUnitV2Bridge_Renderer> > {
	compressed_pair<AUAudioUnitV2Bridge_Renderer *, std::__1::default_delete<AUAudioUnitV2Bridge_Renderer> > __ptr_;
} unique_ptr<AUAudioUnitV2Bridge_Renderer, std::__1::default_delete<AUAudioUnitV2Bridge_Renderer> >;

