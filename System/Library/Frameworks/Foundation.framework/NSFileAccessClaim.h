/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 30, 2017 at 11:20:44 PM Japan Standard Time
* Operating System: Version 10.3.3 (Build 14G60)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol OS_dispatch_semaphore, OS_dispatch_queue;
@class NSXPCConnection, NSString, NSMutableArray, NSError, NSMutableOrderedSet, NSMutableSet, NSMutableDictionary, NSFileAccessProcessManager, NSObject;

@interface NSFileAccessClaim : NSObject <NSSecureCoding> {

	NSXPCConnection* _client;
	NSString* _claimID;
	NSString* _purposeIDOrNil;
	char _cameFromSuperarbiter;
	unsigned _blockageCount;
	char _didWait;
	char _isRevoked;
	NSMutableArray* _claimerBlockageReasons;
	NSError* _claimerError;
	NSMutableOrderedSet* _pendingClaims;
	NSMutableSet* _blockingClaims;
	NSMutableSet* _blockingReactorIDs;
	NSMutableArray* _providerCancellationProcedures;
	NSMutableDictionary* _reacquisitionProceduresByPresenterID;
	NSMutableArray* _revocationProcedures;
	NSMutableArray* _devaluationProcedures;
	NSMutableArray* _finishingProcedures;
	NSFileAccessProcessManager* _processManager;
	NSObject*<OS_dispatch_semaphore> _claimerWaiter;
	char _hasInvokedClaimer;
	id _claimerOrNil;
	/*^block*/id _serverClaimerOrNil;
	NSMutableArray* _sandboxTokens;
	NSObject*<OS_dispatch_queue> _arbiterQueue;

}

@property (readonly) NSObject*<OS_dispatch_semaphore> claimerWaiter;              //@synthesize claimerWaiter=_claimerWaiter - In the implementation block
+(char)canReadingItemAtLocation:(id)arg1 options:(unsigned)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned)arg4 ;
+(char)canWritingItemAtLocation:(id)arg1 options:(unsigned)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned)arg4 ;
+(char)supportsSecureCoding;
-(id)descriptionWithIndenting:(id)arg1 ;
-(void)disavowed;
-(id)claimID;
-(char)cameFromSuperarbiter;
-(char)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(char)arg2 ;
-(void)startObservingClientState;
-(void)forwardUsingConnection:(id)arg1 crashHandler:(/*^block*/id)arg2 ;
-(void)unblock;
-(void)revoked;
-(void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2 ;
-(void)whenDevaluedPerformProcedure:(/*^block*/id)arg1 ;
-(char)isGranted;
-(void)acceptClaimFromClient:(id)arg1 arbiterQueue:(id)arg2 grantHandler:(/*^block*/id)arg3 ;
-(void)setCameFromSuperarbiter;
-(id)pendingClaims;
-(char)isRevoked;
-(NSObject*<OS_dispatch_semaphore>)claimerWaiter;
-(void)_setupWithClaimID:(id)arg1 purposeID:(id)arg2 ;
-(id)allURLs;
-(void)granted;
-(void)invokeClaimer;
-(char)claimerInvokingIsBlockedByReactorWithID:(id)arg1 ;
-(id)purposeID;
-(char)isBlockedByClaimWithPurposeID:(id)arg1 ;
-(void)blockClaimerForReason:(id)arg1 ;
-(void)unblockClaimerForReason:(id)arg1 ;
-(void)removePendingClaims:(id)arg1 ;
-(char)shouldCancelInsteadOfWaiting;
-(void)setClaimerError:(id)arg1 ;
-(void)addPendingClaim:(id)arg1 ;
-(void)scheduleBlockedClaim:(id)arg1 ;
-(id)claimerError;
-(void)makeProviderOfItemAtLocation:(id)arg1 providePhysicalURLThenContinue:(/*^block*/id)arg2 ;
-(char)_writeArchiveOfDirectoryAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3 ;
-(void)whenFinishedPerformProcedure:(/*^block*/id)arg1 ;
-(void)devalueSelf;
-(char)shouldReadingWithOptions:(unsigned)arg1 causePresenterToRelinquish:(id)arg2 ;
-(id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3 ;
-(int)clientProcessIdentifier;
-(char)didWait;
-(void)whenRevokedPerformProcedure:(/*^block*/id)arg1 ;
-(void)evaluateNewClaim:(id)arg1 ;
-(char)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned)arg2 ;
-(char)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned)arg2 ;
-(void)makeProviderOfItemAtLocation:(id)arg1 provideIfNecessaryWithOptions:(unsigned)arg2 thenContinue:(/*^block*/id)arg3 ;
-(void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 readingOptions:(unsigned)arg3 thenContinue:(/*^block*/id)arg4 ;
-(void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 writingOptions:(unsigned)arg3 thenContinue:(/*^block*/id)arg4 ;
-(void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(char)arg2 relinquishUsingProcedureGetter:(/*^block*/id)arg3 ;
-(char)canAccessLocations:(id)arg1 forReading:(char)arg2 error:(id*)arg3 ;
-(void)prepareItemForUploadingFromURL:(id)arg1 thenContinue:(/*^block*/id)arg2 ;
-(void)devalueOldClaim:(id)arg1 ;
-(char)checkIfSymbolicLinkAtURL:(id)arg1 withResolutionCount:(int*)arg2 andIfSoThenReevaluateSelf:(/*^block*/id)arg3 ;
-(id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2 ;
-(char)shouldBeRevokedPriorToInvokingAccessor;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)dealloc;
-(id)description;
-(void)cancelled;
-(id)client;
-(void)finished;
-(void)block;
@end

